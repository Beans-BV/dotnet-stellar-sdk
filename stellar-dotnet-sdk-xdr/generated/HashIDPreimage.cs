// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten
using System;

namespace stellar_dotnet_sdk.xdr
{

    // === xdr source ============================================================

    //  union HashIDPreimage switch (EnvelopeType type)
    //  {
    //  case ENVELOPE_TYPE_OP_ID:
    //      struct
    //      {
    //          AccountID sourceAccount;
    //          SequenceNumber seqNum;
    //          uint32 opNum;
    //      } operationID;
    //  case ENVELOPE_TYPE_POOL_REVOKE_OP_ID:
    //      struct
    //      {
    //          AccountID sourceAccount;
    //          SequenceNumber seqNum;
    //          uint32 opNum;
    //          PoolID liquidityPoolID;
    //          Asset asset;
    //      } revokeID;
    //  };

    //  ===========================================================================
    public class HashIDPreimage
    {
        public HashIDPreimage() { }

        public EnvelopeType Discriminant { get; set; } = new EnvelopeType();

        public HashIDPreimageOperationID OperationID { get; set; }
        public HashIDPreimageRevokeID RevokeID { get; set; }
        public static void Encode(XdrDataOutputStream stream, HashIDPreimage encodedHashIDPreimage)
        {
            stream.WriteInt((int)encodedHashIDPreimage.Discriminant.InnerValue);
            switch (encodedHashIDPreimage.Discriminant.InnerValue)
            {
                case EnvelopeType.EnvelopeTypeEnum.ENVELOPE_TYPE_OP_ID:
                    HashIDPreimageOperationID.Encode(stream, encodedHashIDPreimage.OperationID);
                    break;
                case EnvelopeType.EnvelopeTypeEnum.ENVELOPE_TYPE_POOL_REVOKE_OP_ID:
                    HashIDPreimageRevokeID.Encode(stream, encodedHashIDPreimage.RevokeID);
                    break;
            }
        }
        public static HashIDPreimage Decode(XdrDataInputStream stream)
        {
            HashIDPreimage decodedHashIDPreimage = new HashIDPreimage();
            EnvelopeType discriminant = EnvelopeType.Decode(stream);
            decodedHashIDPreimage.Discriminant = discriminant;
            switch (decodedHashIDPreimage.Discriminant.InnerValue)
            {
                case EnvelopeType.EnvelopeTypeEnum.ENVELOPE_TYPE_OP_ID:
                    decodedHashIDPreimage.OperationID = HashIDPreimageOperationID.Decode(stream);
                    break;
                case EnvelopeType.EnvelopeTypeEnum.ENVELOPE_TYPE_POOL_REVOKE_OP_ID:
                    decodedHashIDPreimage.RevokeID = HashIDPreimageRevokeID.Decode(stream);
                    break;
            }
            return decodedHashIDPreimage;
        }

        public class HashIDPreimageOperationID
        {
            public HashIDPreimageOperationID() { }
            public AccountID SourceAccount { get; set; }
            public SequenceNumber SeqNum { get; set; }
            public Uint32 OpNum { get; set; }

            public static void Encode(XdrDataOutputStream stream, HashIDPreimageOperationID encodedHashIDPreimageOperationID)
            {
                AccountID.Encode(stream, encodedHashIDPreimageOperationID.SourceAccount);
                SequenceNumber.Encode(stream, encodedHashIDPreimageOperationID.SeqNum);
                Uint32.Encode(stream, encodedHashIDPreimageOperationID.OpNum);
            }
            public static HashIDPreimageOperationID Decode(XdrDataInputStream stream)
            {
                HashIDPreimageOperationID decodedHashIDPreimageOperationID = new HashIDPreimageOperationID();
                decodedHashIDPreimageOperationID.SourceAccount = AccountID.Decode(stream);
                decodedHashIDPreimageOperationID.SeqNum = SequenceNumber.Decode(stream);
                decodedHashIDPreimageOperationID.OpNum = Uint32.Decode(stream);
                return decodedHashIDPreimageOperationID;
            }

        }
        public class HashIDPreimageRevokeID
        {
            public HashIDPreimageRevokeID() { }
            public AccountID SourceAccount { get; set; }
            public SequenceNumber SeqNum { get; set; }
            public Uint32 OpNum { get; set; }
            public PoolID LiquidityPoolID { get; set; }
            public Asset Asset { get; set; }

            public static void Encode(XdrDataOutputStream stream, HashIDPreimageRevokeID encodedHashIDPreimageRevokeID)
            {
                AccountID.Encode(stream, encodedHashIDPreimageRevokeID.SourceAccount);
                SequenceNumber.Encode(stream, encodedHashIDPreimageRevokeID.SeqNum);
                Uint32.Encode(stream, encodedHashIDPreimageRevokeID.OpNum);
                PoolID.Encode(stream, encodedHashIDPreimageRevokeID.LiquidityPoolID);
                Asset.Encode(stream, encodedHashIDPreimageRevokeID.Asset);
            }
            public static HashIDPreimageRevokeID Decode(XdrDataInputStream stream)
            {
                HashIDPreimageRevokeID decodedHashIDPreimageRevokeID = new HashIDPreimageRevokeID();
                decodedHashIDPreimageRevokeID.SourceAccount = AccountID.Decode(stream);
                decodedHashIDPreimageRevokeID.SeqNum = SequenceNumber.Decode(stream);
                decodedHashIDPreimageRevokeID.OpNum = Uint32.Decode(stream);
                decodedHashIDPreimageRevokeID.LiquidityPoolID = PoolID.Decode(stream);
                decodedHashIDPreimageRevokeID.Asset = Asset.Decode(stream);
                return decodedHashIDPreimageRevokeID;
            }

        }
    }
}
