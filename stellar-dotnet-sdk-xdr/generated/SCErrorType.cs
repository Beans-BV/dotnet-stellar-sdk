// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

using System;

namespace stellar_dotnet_sdk.xdr;

// === xdr source ============================================================

//  enum SCErrorType
//  {
//      SCE_CONTRACT = 0,          // Contract-specific, user-defined codes.
//      SCE_WASM_VM = 1,           // Errors while interpreting WASM bytecode.
//      SCE_CONTEXT = 2,           // Errors in the contract's host context.
//      SCE_STORAGE = 3,           // Errors accessing host storage.
//      SCE_OBJECT = 4,            // Errors working with host objects.
//      SCE_CRYPTO = 5,            // Errors in cryptographic operations.
//      SCE_EVENTS = 6,            // Errors while emitting events.
//      SCE_BUDGET = 7,            // Errors relating to budget limits.
//      SCE_VALUE = 8,             // Errors working with host values or SCVals.
//      SCE_AUTH = 9               // Errors from the authentication subsystem.
//  };

//  ===========================================================================
public class SCErrorType
{
    public enum SCErrorTypeEnum
    {
        SCE_CONTRACT = 0,
        SCE_WASM_VM = 1,
        SCE_CONTEXT = 2,
        SCE_STORAGE = 3,
        SCE_OBJECT = 4,
        SCE_CRYPTO = 5,
        SCE_EVENTS = 6,
        SCE_BUDGET = 7,
        SCE_VALUE = 8,
        SCE_AUTH = 9
    }

    public SCErrorTypeEnum InnerValue { get; set; }

    public static SCErrorType Create(SCErrorTypeEnum v)
    {
        return new SCErrorType
        {
            InnerValue = v
        };
    }

    public static SCErrorType Decode(XdrDataInputStream stream)
    {
        var value = stream.ReadInt();
        switch (value)
        {
            case 0: return Create(SCErrorTypeEnum.SCE_CONTRACT);
            case 1: return Create(SCErrorTypeEnum.SCE_WASM_VM);
            case 2: return Create(SCErrorTypeEnum.SCE_CONTEXT);
            case 3: return Create(SCErrorTypeEnum.SCE_STORAGE);
            case 4: return Create(SCErrorTypeEnum.SCE_OBJECT);
            case 5: return Create(SCErrorTypeEnum.SCE_CRYPTO);
            case 6: return Create(SCErrorTypeEnum.SCE_EVENTS);
            case 7: return Create(SCErrorTypeEnum.SCE_BUDGET);
            case 8: return Create(SCErrorTypeEnum.SCE_VALUE);
            case 9: return Create(SCErrorTypeEnum.SCE_AUTH);
            default:
                throw new Exception("Unknown enum value: " + value);
        }
    }

    public static void Encode(XdrDataOutputStream stream, SCErrorType value)
    {
        stream.WriteInt((int)value.InnerValue);
    }
}