// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

namespace stellar_dotnet_sdk.xdr;

// === xdr source ============================================================

//  union ConfigSettingEntry switch (ConfigSettingID configSettingID)
//  {
//  case CONFIG_SETTING_CONTRACT_MAX_SIZE_BYTES:
//      uint32 contractMaxSizeBytes;
//  case CONFIG_SETTING_CONTRACT_COMPUTE_V0:
//      ConfigSettingContractComputeV0 contractCompute;
//  case CONFIG_SETTING_CONTRACT_LEDGER_COST_V0:
//      ConfigSettingContractLedgerCostV0 contractLedgerCost;
//  case CONFIG_SETTING_CONTRACT_HISTORICAL_DATA_V0:
//      ConfigSettingContractHistoricalDataV0 contractHistoricalData;
//  case CONFIG_SETTING_CONTRACT_EVENTS_V0:
//      ConfigSettingContractEventsV0 contractEvents;
//  case CONFIG_SETTING_CONTRACT_BANDWIDTH_V0:
//      ConfigSettingContractBandwidthV0 contractBandwidth;
//  case CONFIG_SETTING_CONTRACT_COST_PARAMS_CPU_INSTRUCTIONS:
//      ContractCostParams contractCostParamsCpuInsns;
//  case CONFIG_SETTING_CONTRACT_COST_PARAMS_MEMORY_BYTES:
//      ContractCostParams contractCostParamsMemBytes;
//  case CONFIG_SETTING_CONTRACT_DATA_KEY_SIZE_BYTES:
//      uint32 contractDataKeySizeBytes;
//  case CONFIG_SETTING_CONTRACT_DATA_ENTRY_SIZE_BYTES:
//      uint32 contractDataEntrySizeBytes;
//  case CONFIG_SETTING_STATE_ARCHIVAL:
//      StateArchivalSettings stateArchivalSettings;
//  case CONFIG_SETTING_CONTRACT_EXECUTION_LANES:
//      ConfigSettingContractExecutionLanesV0 contractExecutionLanes;
//  case CONFIG_SETTING_BUCKETLIST_SIZE_WINDOW:
//      uint64 bucketListSizeWindow<>;
//  case CONFIG_SETTING_EVICTION_ITERATOR:
//      EvictionIterator evictionIterator;
//  };

//  ===========================================================================
public class ConfigSettingEntry
{
    public ConfigSettingID Discriminant { get; set; } = new();

    public Uint32 ContractMaxSizeBytes { get; set; }
    public ConfigSettingContractComputeV0 ContractCompute { get; set; }
    public ConfigSettingContractLedgerCostV0 ContractLedgerCost { get; set; }
    public ConfigSettingContractHistoricalDataV0 ContractHistoricalData { get; set; }
    public ConfigSettingContractEventsV0 ContractEvents { get; set; }
    public ConfigSettingContractBandwidthV0 ContractBandwidth { get; set; }
    public ContractCostParams ContractCostParamsCpuInsns { get; set; }
    public ContractCostParams ContractCostParamsMemBytes { get; set; }
    public Uint32 ContractDataKeySizeBytes { get; set; }
    public Uint32 ContractDataEntrySizeBytes { get; set; }
    public StateArchivalSettings StateArchivalSettings { get; set; }
    public ConfigSettingContractExecutionLanesV0 ContractExecutionLanes { get; set; }
    public Uint64[] BucketListSizeWindow { get; set; }
    public EvictionIterator EvictionIterator { get; set; }

    public static void Encode(XdrDataOutputStream stream, ConfigSettingEntry encodedConfigSettingEntry)
    {
        stream.WriteInt((int)encodedConfigSettingEntry.Discriminant.InnerValue);
        switch (encodedConfigSettingEntry.Discriminant.InnerValue)
        {
            case ConfigSettingID.ConfigSettingIDEnum.CONFIG_SETTING_CONTRACT_MAX_SIZE_BYTES:
                Uint32.Encode(stream, encodedConfigSettingEntry.ContractMaxSizeBytes);
                break;
            case ConfigSettingID.ConfigSettingIDEnum.CONFIG_SETTING_CONTRACT_COMPUTE_V0:
                ConfigSettingContractComputeV0.Encode(stream, encodedConfigSettingEntry.ContractCompute);
                break;
            case ConfigSettingID.ConfigSettingIDEnum.CONFIG_SETTING_CONTRACT_LEDGER_COST_V0:
                ConfigSettingContractLedgerCostV0.Encode(stream, encodedConfigSettingEntry.ContractLedgerCost);
                break;
            case ConfigSettingID.ConfigSettingIDEnum.CONFIG_SETTING_CONTRACT_HISTORICAL_DATA_V0:
                ConfigSettingContractHistoricalDataV0.Encode(stream, encodedConfigSettingEntry.ContractHistoricalData);
                break;
            case ConfigSettingID.ConfigSettingIDEnum.CONFIG_SETTING_CONTRACT_EVENTS_V0:
                ConfigSettingContractEventsV0.Encode(stream, encodedConfigSettingEntry.ContractEvents);
                break;
            case ConfigSettingID.ConfigSettingIDEnum.CONFIG_SETTING_CONTRACT_BANDWIDTH_V0:
                ConfigSettingContractBandwidthV0.Encode(stream, encodedConfigSettingEntry.ContractBandwidth);
                break;
            case ConfigSettingID.ConfigSettingIDEnum.CONFIG_SETTING_CONTRACT_COST_PARAMS_CPU_INSTRUCTIONS:
                ContractCostParams.Encode(stream, encodedConfigSettingEntry.ContractCostParamsCpuInsns);
                break;
            case ConfigSettingID.ConfigSettingIDEnum.CONFIG_SETTING_CONTRACT_COST_PARAMS_MEMORY_BYTES:
                ContractCostParams.Encode(stream, encodedConfigSettingEntry.ContractCostParamsMemBytes);
                break;
            case ConfigSettingID.ConfigSettingIDEnum.CONFIG_SETTING_CONTRACT_DATA_KEY_SIZE_BYTES:
                Uint32.Encode(stream, encodedConfigSettingEntry.ContractDataKeySizeBytes);
                break;
            case ConfigSettingID.ConfigSettingIDEnum.CONFIG_SETTING_CONTRACT_DATA_ENTRY_SIZE_BYTES:
                Uint32.Encode(stream, encodedConfigSettingEntry.ContractDataEntrySizeBytes);
                break;
            case ConfigSettingID.ConfigSettingIDEnum.CONFIG_SETTING_STATE_ARCHIVAL:
                StateArchivalSettings.Encode(stream, encodedConfigSettingEntry.StateArchivalSettings);
                break;
            case ConfigSettingID.ConfigSettingIDEnum.CONFIG_SETTING_CONTRACT_EXECUTION_LANES:
                ConfigSettingContractExecutionLanesV0.Encode(stream, encodedConfigSettingEntry.ContractExecutionLanes);
                break;
            case ConfigSettingID.ConfigSettingIDEnum.CONFIG_SETTING_BUCKETLIST_SIZE_WINDOW:
                var bucketListSizeWindowsize = encodedConfigSettingEntry.BucketListSizeWindow.Length;
                stream.WriteInt(bucketListSizeWindowsize);
                for (var i = 0; i < bucketListSizeWindowsize; i++)
                    Uint64.Encode(stream, encodedConfigSettingEntry.BucketListSizeWindow[i]);
                break;
            case ConfigSettingID.ConfigSettingIDEnum.CONFIG_SETTING_EVICTION_ITERATOR:
                EvictionIterator.Encode(stream, encodedConfigSettingEntry.EvictionIterator);
                break;
        }
    }

    public static ConfigSettingEntry Decode(XdrDataInputStream stream)
    {
        var decodedConfigSettingEntry = new ConfigSettingEntry();
        var discriminant = ConfigSettingID.Decode(stream);
        decodedConfigSettingEntry.Discriminant = discriminant;
        switch (decodedConfigSettingEntry.Discriminant.InnerValue)
        {
            case ConfigSettingID.ConfigSettingIDEnum.CONFIG_SETTING_CONTRACT_MAX_SIZE_BYTES:
                decodedConfigSettingEntry.ContractMaxSizeBytes = Uint32.Decode(stream);
                break;
            case ConfigSettingID.ConfigSettingIDEnum.CONFIG_SETTING_CONTRACT_COMPUTE_V0:
                decodedConfigSettingEntry.ContractCompute = ConfigSettingContractComputeV0.Decode(stream);
                break;
            case ConfigSettingID.ConfigSettingIDEnum.CONFIG_SETTING_CONTRACT_LEDGER_COST_V0:
                decodedConfigSettingEntry.ContractLedgerCost = ConfigSettingContractLedgerCostV0.Decode(stream);
                break;
            case ConfigSettingID.ConfigSettingIDEnum.CONFIG_SETTING_CONTRACT_HISTORICAL_DATA_V0:
                decodedConfigSettingEntry.ContractHistoricalData = ConfigSettingContractHistoricalDataV0.Decode(stream);
                break;
            case ConfigSettingID.ConfigSettingIDEnum.CONFIG_SETTING_CONTRACT_EVENTS_V0:
                decodedConfigSettingEntry.ContractEvents = ConfigSettingContractEventsV0.Decode(stream);
                break;
            case ConfigSettingID.ConfigSettingIDEnum.CONFIG_SETTING_CONTRACT_BANDWIDTH_V0:
                decodedConfigSettingEntry.ContractBandwidth = ConfigSettingContractBandwidthV0.Decode(stream);
                break;
            case ConfigSettingID.ConfigSettingIDEnum.CONFIG_SETTING_CONTRACT_COST_PARAMS_CPU_INSTRUCTIONS:
                decodedConfigSettingEntry.ContractCostParamsCpuInsns = ContractCostParams.Decode(stream);
                break;
            case ConfigSettingID.ConfigSettingIDEnum.CONFIG_SETTING_CONTRACT_COST_PARAMS_MEMORY_BYTES:
                decodedConfigSettingEntry.ContractCostParamsMemBytes = ContractCostParams.Decode(stream);
                break;
            case ConfigSettingID.ConfigSettingIDEnum.CONFIG_SETTING_CONTRACT_DATA_KEY_SIZE_BYTES:
                decodedConfigSettingEntry.ContractDataKeySizeBytes = Uint32.Decode(stream);
                break;
            case ConfigSettingID.ConfigSettingIDEnum.CONFIG_SETTING_CONTRACT_DATA_ENTRY_SIZE_BYTES:
                decodedConfigSettingEntry.ContractDataEntrySizeBytes = Uint32.Decode(stream);
                break;
            case ConfigSettingID.ConfigSettingIDEnum.CONFIG_SETTING_STATE_ARCHIVAL:
                decodedConfigSettingEntry.StateArchivalSettings = StateArchivalSettings.Decode(stream);
                break;
            case ConfigSettingID.ConfigSettingIDEnum.CONFIG_SETTING_CONTRACT_EXECUTION_LANES:
                decodedConfigSettingEntry.ContractExecutionLanes = ConfigSettingContractExecutionLanesV0.Decode(stream);
                break;
            case ConfigSettingID.ConfigSettingIDEnum.CONFIG_SETTING_BUCKETLIST_SIZE_WINDOW:
                var bucketListSizeWindowsize = stream.ReadInt();
                decodedConfigSettingEntry.BucketListSizeWindow = new Uint64[bucketListSizeWindowsize];
                for (var i = 0; i < bucketListSizeWindowsize; i++)
                    decodedConfigSettingEntry.BucketListSizeWindow[i] = Uint64.Decode(stream);
                break;
            case ConfigSettingID.ConfigSettingIDEnum.CONFIG_SETTING_EVICTION_ITERATOR:
                decodedConfigSettingEntry.EvictionIterator = EvictionIterator.Decode(stream);
                break;
        }

        return decodedConfigSettingEntry;
    }
}