// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

namespace stellar_dotnet_sdk.xdr;

// === xdr source ============================================================

//  union PathPaymentStrictReceiveResult switch (
//      PathPaymentStrictReceiveResultCode code)
//  {
//  case PATH_PAYMENT_STRICT_RECEIVE_SUCCESS:
//      struct
//      {
//          ClaimAtom offers<>;
//          SimplePaymentResult last;
//      } success;
//  case PATH_PAYMENT_STRICT_RECEIVE_MALFORMED:
//  case PATH_PAYMENT_STRICT_RECEIVE_UNDERFUNDED:
//  case PATH_PAYMENT_STRICT_RECEIVE_SRC_NO_TRUST:
//  case PATH_PAYMENT_STRICT_RECEIVE_SRC_NOT_AUTHORIZED:
//  case PATH_PAYMENT_STRICT_RECEIVE_NO_DESTINATION:
//  case PATH_PAYMENT_STRICT_RECEIVE_NO_TRUST:
//  case PATH_PAYMENT_STRICT_RECEIVE_NOT_AUTHORIZED:
//  case PATH_PAYMENT_STRICT_RECEIVE_LINE_FULL:
//      void;
//  case PATH_PAYMENT_STRICT_RECEIVE_NO_ISSUER:
//      Asset noIssuer; // the asset that caused the error
//  case PATH_PAYMENT_STRICT_RECEIVE_TOO_FEW_OFFERS:
//  case PATH_PAYMENT_STRICT_RECEIVE_OFFER_CROSS_SELF:
//  case PATH_PAYMENT_STRICT_RECEIVE_OVER_SENDMAX:
//      void;
//  };

//  ===========================================================================
public class PathPaymentStrictReceiveResult
{
    public PathPaymentStrictReceiveResultCode Discriminant { get; set; } = new();

    public PathPaymentStrictReceiveResultSuccess Success { get; set; }
    public Asset NoIssuer { get; set; }

    public static void Encode(XdrDataOutputStream stream,
        PathPaymentStrictReceiveResult encodedPathPaymentStrictReceiveResult)
    {
        stream.WriteInt((int)encodedPathPaymentStrictReceiveResult.Discriminant.InnerValue);
        switch (encodedPathPaymentStrictReceiveResult.Discriminant.InnerValue)
        {
            case PathPaymentStrictReceiveResultCode.PathPaymentStrictReceiveResultCodeEnum
                .PATH_PAYMENT_STRICT_RECEIVE_SUCCESS:
                PathPaymentStrictReceiveResultSuccess.Encode(stream, encodedPathPaymentStrictReceiveResult.Success);
                break;
            case PathPaymentStrictReceiveResultCode.PathPaymentStrictReceiveResultCodeEnum
                .PATH_PAYMENT_STRICT_RECEIVE_MALFORMED:
            case PathPaymentStrictReceiveResultCode.PathPaymentStrictReceiveResultCodeEnum
                .PATH_PAYMENT_STRICT_RECEIVE_UNDERFUNDED:
            case PathPaymentStrictReceiveResultCode.PathPaymentStrictReceiveResultCodeEnum
                .PATH_PAYMENT_STRICT_RECEIVE_SRC_NO_TRUST:
            case PathPaymentStrictReceiveResultCode.PathPaymentStrictReceiveResultCodeEnum
                .PATH_PAYMENT_STRICT_RECEIVE_SRC_NOT_AUTHORIZED:
            case PathPaymentStrictReceiveResultCode.PathPaymentStrictReceiveResultCodeEnum
                .PATH_PAYMENT_STRICT_RECEIVE_NO_DESTINATION:
            case PathPaymentStrictReceiveResultCode.PathPaymentStrictReceiveResultCodeEnum
                .PATH_PAYMENT_STRICT_RECEIVE_NO_TRUST:
            case PathPaymentStrictReceiveResultCode.PathPaymentStrictReceiveResultCodeEnum
                .PATH_PAYMENT_STRICT_RECEIVE_NOT_AUTHORIZED:
            case PathPaymentStrictReceiveResultCode.PathPaymentStrictReceiveResultCodeEnum
                .PATH_PAYMENT_STRICT_RECEIVE_LINE_FULL:
                break;
            case PathPaymentStrictReceiveResultCode.PathPaymentStrictReceiveResultCodeEnum
                .PATH_PAYMENT_STRICT_RECEIVE_NO_ISSUER:
                Asset.Encode(stream, encodedPathPaymentStrictReceiveResult.NoIssuer);
                break;
            case PathPaymentStrictReceiveResultCode.PathPaymentStrictReceiveResultCodeEnum
                .PATH_PAYMENT_STRICT_RECEIVE_TOO_FEW_OFFERS:
            case PathPaymentStrictReceiveResultCode.PathPaymentStrictReceiveResultCodeEnum
                .PATH_PAYMENT_STRICT_RECEIVE_OFFER_CROSS_SELF:
            case PathPaymentStrictReceiveResultCode.PathPaymentStrictReceiveResultCodeEnum
                .PATH_PAYMENT_STRICT_RECEIVE_OVER_SENDMAX:
                break;
        }
    }

    public static PathPaymentStrictReceiveResult Decode(XdrDataInputStream stream)
    {
        var decodedPathPaymentStrictReceiveResult = new PathPaymentStrictReceiveResult();
        var discriminant = PathPaymentStrictReceiveResultCode.Decode(stream);
        decodedPathPaymentStrictReceiveResult.Discriminant = discriminant;
        switch (decodedPathPaymentStrictReceiveResult.Discriminant.InnerValue)
        {
            case PathPaymentStrictReceiveResultCode.PathPaymentStrictReceiveResultCodeEnum
                .PATH_PAYMENT_STRICT_RECEIVE_SUCCESS:
                decodedPathPaymentStrictReceiveResult.Success = PathPaymentStrictReceiveResultSuccess.Decode(stream);
                break;
            case PathPaymentStrictReceiveResultCode.PathPaymentStrictReceiveResultCodeEnum
                .PATH_PAYMENT_STRICT_RECEIVE_MALFORMED:
            case PathPaymentStrictReceiveResultCode.PathPaymentStrictReceiveResultCodeEnum
                .PATH_PAYMENT_STRICT_RECEIVE_UNDERFUNDED:
            case PathPaymentStrictReceiveResultCode.PathPaymentStrictReceiveResultCodeEnum
                .PATH_PAYMENT_STRICT_RECEIVE_SRC_NO_TRUST:
            case PathPaymentStrictReceiveResultCode.PathPaymentStrictReceiveResultCodeEnum
                .PATH_PAYMENT_STRICT_RECEIVE_SRC_NOT_AUTHORIZED:
            case PathPaymentStrictReceiveResultCode.PathPaymentStrictReceiveResultCodeEnum
                .PATH_PAYMENT_STRICT_RECEIVE_NO_DESTINATION:
            case PathPaymentStrictReceiveResultCode.PathPaymentStrictReceiveResultCodeEnum
                .PATH_PAYMENT_STRICT_RECEIVE_NO_TRUST:
            case PathPaymentStrictReceiveResultCode.PathPaymentStrictReceiveResultCodeEnum
                .PATH_PAYMENT_STRICT_RECEIVE_NOT_AUTHORIZED:
            case PathPaymentStrictReceiveResultCode.PathPaymentStrictReceiveResultCodeEnum
                .PATH_PAYMENT_STRICT_RECEIVE_LINE_FULL:
                break;
            case PathPaymentStrictReceiveResultCode.PathPaymentStrictReceiveResultCodeEnum
                .PATH_PAYMENT_STRICT_RECEIVE_NO_ISSUER:
                decodedPathPaymentStrictReceiveResult.NoIssuer = Asset.Decode(stream);
                break;
            case PathPaymentStrictReceiveResultCode.PathPaymentStrictReceiveResultCodeEnum
                .PATH_PAYMENT_STRICT_RECEIVE_TOO_FEW_OFFERS:
            case PathPaymentStrictReceiveResultCode.PathPaymentStrictReceiveResultCodeEnum
                .PATH_PAYMENT_STRICT_RECEIVE_OFFER_CROSS_SELF:
            case PathPaymentStrictReceiveResultCode.PathPaymentStrictReceiveResultCodeEnum
                .PATH_PAYMENT_STRICT_RECEIVE_OVER_SENDMAX:
                break;
        }

        return decodedPathPaymentStrictReceiveResult;
    }

    public class PathPaymentStrictReceiveResultSuccess
    {
        public ClaimAtom[] Offers { get; set; }
        public SimplePaymentResult Last { get; set; }

        public static void Encode(XdrDataOutputStream stream,
            PathPaymentStrictReceiveResultSuccess encodedPathPaymentStrictReceiveResultSuccess)
        {
            var offerssize = encodedPathPaymentStrictReceiveResultSuccess.Offers.Length;
            stream.WriteInt(offerssize);
            for (var i = 0; i < offerssize; i++)
                ClaimAtom.Encode(stream, encodedPathPaymentStrictReceiveResultSuccess.Offers[i]);
            SimplePaymentResult.Encode(stream, encodedPathPaymentStrictReceiveResultSuccess.Last);
        }

        public static PathPaymentStrictReceiveResultSuccess Decode(XdrDataInputStream stream)
        {
            var decodedPathPaymentStrictReceiveResultSuccess = new PathPaymentStrictReceiveResultSuccess();
            var offerssize = stream.ReadInt();
            decodedPathPaymentStrictReceiveResultSuccess.Offers = new ClaimAtom[offerssize];
            for (var i = 0; i < offerssize; i++)
                decodedPathPaymentStrictReceiveResultSuccess.Offers[i] = ClaimAtom.Decode(stream);
            decodedPathPaymentStrictReceiveResultSuccess.Last = SimplePaymentResult.Decode(stream);
            return decodedPathPaymentStrictReceiveResultSuccess;
        }
    }
}