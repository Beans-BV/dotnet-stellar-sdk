// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

namespace stellar_dotnet_sdk.xdr;

// === xdr source ============================================================

//  struct StateArchivalSettings {
//      uint32 maxEntryTTL;
//      uint32 minTemporaryTTL;
//      uint32 minPersistentTTL;
//  
//      // rent_fee = wfee_rate_average / rent_rate_denominator_for_type
//      int64 persistentRentRateDenominator;
//      int64 tempRentRateDenominator;
//  
//      // max number of entries that emit archival meta in a single ledger
//      uint32 maxEntriesToArchive;
//  
//      // Number of snapshots to use when calculating average BucketList size
//      uint32 bucketListSizeWindowSampleSize;
//  
//      // Maximum number of bytes that we scan for eviction per ledger
//      uint64 evictionScanSize;
//  
//      // Lowest BucketList level to be scanned to evict entries
//      uint32 startingEvictionScanLevel;
//  };

//  ===========================================================================
public class StateArchivalSettings
{
    public Uint32 MaxEntryTTL { get; set; }
    public Uint32 MinTemporaryTTL { get; set; }
    public Uint32 MinPersistentTTL { get; set; }
    public Int64 PersistentRentRateDenominator { get; set; }
    public Int64 TempRentRateDenominator { get; set; }
    public Uint32 MaxEntriesToArchive { get; set; }
    public Uint32 BucketListSizeWindowSampleSize { get; set; }
    public Uint64 EvictionScanSize { get; set; }
    public Uint32 StartingEvictionScanLevel { get; set; }

    public static void Encode(XdrDataOutputStream stream, StateArchivalSettings encodedStateArchivalSettings)
    {
        Uint32.Encode(stream, encodedStateArchivalSettings.MaxEntryTTL);
        Uint32.Encode(stream, encodedStateArchivalSettings.MinTemporaryTTL);
        Uint32.Encode(stream, encodedStateArchivalSettings.MinPersistentTTL);
        Int64.Encode(stream, encodedStateArchivalSettings.PersistentRentRateDenominator);
        Int64.Encode(stream, encodedStateArchivalSettings.TempRentRateDenominator);
        Uint32.Encode(stream, encodedStateArchivalSettings.MaxEntriesToArchive);
        Uint32.Encode(stream, encodedStateArchivalSettings.BucketListSizeWindowSampleSize);
        Uint64.Encode(stream, encodedStateArchivalSettings.EvictionScanSize);
        Uint32.Encode(stream, encodedStateArchivalSettings.StartingEvictionScanLevel);
    }

    public static StateArchivalSettings Decode(XdrDataInputStream stream)
    {
        var decodedStateArchivalSettings = new StateArchivalSettings();
        decodedStateArchivalSettings.MaxEntryTTL = Uint32.Decode(stream);
        decodedStateArchivalSettings.MinTemporaryTTL = Uint32.Decode(stream);
        decodedStateArchivalSettings.MinPersistentTTL = Uint32.Decode(stream);
        decodedStateArchivalSettings.PersistentRentRateDenominator = Int64.Decode(stream);
        decodedStateArchivalSettings.TempRentRateDenominator = Int64.Decode(stream);
        decodedStateArchivalSettings.MaxEntriesToArchive = Uint32.Decode(stream);
        decodedStateArchivalSettings.BucketListSizeWindowSampleSize = Uint32.Decode(stream);
        decodedStateArchivalSettings.EvictionScanSize = Uint64.Decode(stream);
        decodedStateArchivalSettings.StartingEvictionScanLevel = Uint32.Decode(stream);
        return decodedStateArchivalSettings;
    }
}