// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

namespace StellarDotnetSdk.Xdr;

// === xdr source ============================================================

//  struct TransactionMetaV4
//  {
//      ExtensionPoint ext;
//  
//      LedgerEntryChanges txChangesBefore;  // tx level changes before operations
//                                           // are applied if any
//      OperationMetaV2 operations<>;        // meta for each operation
//      LedgerEntryChanges txChangesAfter;   // tx level changes after operations are
//                                           // applied if any
//      SorobanTransactionMetaV2* sorobanMeta; // Soroban-specific meta (only for
//                                             // Soroban transactions).
//  
//      TransactionEvent events<>; // Used for transaction-level events (like fee payment)
//      DiagnosticEvent diagnosticEvents<>; // Used for all diagnostic information
//  };

//  ===========================================================================
public class TransactionMetaV4
{
    public ExtensionPoint Ext { get; set; }
    public LedgerEntryChanges TxChangesBefore { get; set; }
    public OperationMetaV2[] Operations { get; set; }
    public LedgerEntryChanges TxChangesAfter { get; set; }
    public SorobanTransactionMetaV2 SorobanMeta { get; set; }
    public TransactionEvent[] Events { get; set; }
    public DiagnosticEvent[] DiagnosticEvents { get; set; }

    public static void Encode(XdrDataOutputStream stream, TransactionMetaV4 encodedTransactionMetaV4)
    {
        ExtensionPoint.Encode(stream, encodedTransactionMetaV4.Ext);
        LedgerEntryChanges.Encode(stream, encodedTransactionMetaV4.TxChangesBefore);
        var operationssize = encodedTransactionMetaV4.Operations.Length;
        stream.WriteInt(operationssize);
        for (var i = 0; i < operationssize; i++)
        {
            OperationMetaV2.Encode(stream, encodedTransactionMetaV4.Operations[i]);
        }
        LedgerEntryChanges.Encode(stream, encodedTransactionMetaV4.TxChangesAfter);
        if (encodedTransactionMetaV4.SorobanMeta != null)
        {
            stream.WriteInt(1);
            SorobanTransactionMetaV2.Encode(stream, encodedTransactionMetaV4.SorobanMeta);
        }
        else
        {
            stream.WriteInt(0);
        }
        var eventssize = encodedTransactionMetaV4.Events.Length;
        stream.WriteInt(eventssize);
        for (var i = 0; i < eventssize; i++)
        {
            TransactionEvent.Encode(stream, encodedTransactionMetaV4.Events[i]);
        }
        var diagnosticEventssize = encodedTransactionMetaV4.DiagnosticEvents.Length;
        stream.WriteInt(diagnosticEventssize);
        for (var i = 0; i < diagnosticEventssize; i++)
        {
            DiagnosticEvent.Encode(stream, encodedTransactionMetaV4.DiagnosticEvents[i]);
        }
    }

    public static TransactionMetaV4 Decode(XdrDataInputStream stream)
    {
        var decodedTransactionMetaV4 = new TransactionMetaV4();
        decodedTransactionMetaV4.Ext = ExtensionPoint.Decode(stream);
        decodedTransactionMetaV4.TxChangesBefore = LedgerEntryChanges.Decode(stream);
        var operationssize = stream.ReadInt();
        decodedTransactionMetaV4.Operations = new OperationMetaV2[operationssize];
        for (var i = 0; i < operationssize; i++)
        {
            decodedTransactionMetaV4.Operations[i] = OperationMetaV2.Decode(stream);
        }
        decodedTransactionMetaV4.TxChangesAfter = LedgerEntryChanges.Decode(stream);
        var SorobanMetaPresent = stream.ReadInt();
        if (SorobanMetaPresent != 0)
        {
            decodedTransactionMetaV4.SorobanMeta = SorobanTransactionMetaV2.Decode(stream);
        }
        var eventssize = stream.ReadInt();
        decodedTransactionMetaV4.Events = new TransactionEvent[eventssize];
        for (var i = 0; i < eventssize; i++)
        {
            decodedTransactionMetaV4.Events[i] = TransactionEvent.Decode(stream);
        }
        var diagnosticEventssize = stream.ReadInt();
        decodedTransactionMetaV4.DiagnosticEvents = new DiagnosticEvent[diagnosticEventssize];
        for (var i = 0; i < diagnosticEventssize; i++)
        {
            decodedTransactionMetaV4.DiagnosticEvents[i] = DiagnosticEvent.Decode(stream);
        }
        return decodedTransactionMetaV4;
    }
}