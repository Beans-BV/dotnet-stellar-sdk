// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

namespace StellarDotnetSdk.Xdr;

// === xdr source ============================================================

//  union SCSpecTypeDef switch (SCSpecType type)
//  {
//  case SC_SPEC_TYPE_VAL:
//  case SC_SPEC_TYPE_BOOL:
//  case SC_SPEC_TYPE_VOID:
//  case SC_SPEC_TYPE_ERROR:
//  case SC_SPEC_TYPE_U32:
//  case SC_SPEC_TYPE_I32:
//  case SC_SPEC_TYPE_U64:
//  case SC_SPEC_TYPE_I64:
//  case SC_SPEC_TYPE_TIMEPOINT:
//  case SC_SPEC_TYPE_DURATION:
//  case SC_SPEC_TYPE_U128:
//  case SC_SPEC_TYPE_I128:
//  case SC_SPEC_TYPE_U256:
//  case SC_SPEC_TYPE_I256:
//  case SC_SPEC_TYPE_BYTES:
//  case SC_SPEC_TYPE_STRING:
//  case SC_SPEC_TYPE_SYMBOL:
//  case SC_SPEC_TYPE_ADDRESS:
//  case SC_SPEC_TYPE_MUXED_ADDRESS:
//      void;
//  case SC_SPEC_TYPE_OPTION:
//      SCSpecTypeOption option;
//  case SC_SPEC_TYPE_RESULT:
//      SCSpecTypeResult result;
//  case SC_SPEC_TYPE_VEC:
//      SCSpecTypeVec vec;
//  case SC_SPEC_TYPE_MAP:
//      SCSpecTypeMap map;
//  case SC_SPEC_TYPE_TUPLE:
//      SCSpecTypeTuple tuple;
//  case SC_SPEC_TYPE_BYTES_N:
//      SCSpecTypeBytesN bytesN;
//  case SC_SPEC_TYPE_UDT:
//      SCSpecTypeUDT udt;
//  };

//  ===========================================================================
public class SCSpecTypeDef
{
    public SCSpecType Discriminant { get; set; } = new();

    public SCSpecTypeOption Option { get; set; }
    public SCSpecTypeResult Result { get; set; }
    public SCSpecTypeVec Vec { get; set; }
    public SCSpecTypeMap Map { get; set; }
    public SCSpecTypeTuple Tuple { get; set; }
    public SCSpecTypeBytesN BytesN { get; set; }
    public SCSpecTypeUDT Udt { get; set; }

    public static void Encode(XdrDataOutputStream stream, SCSpecTypeDef encodedSCSpecTypeDef)
    {
        stream.WriteInt((int)encodedSCSpecTypeDef.Discriminant.InnerValue);
        switch (encodedSCSpecTypeDef.Discriminant.InnerValue)
        {
            case SCSpecType.SCSpecTypeEnum.SC_SPEC_TYPE_VAL:
            case SCSpecType.SCSpecTypeEnum.SC_SPEC_TYPE_BOOL:
            case SCSpecType.SCSpecTypeEnum.SC_SPEC_TYPE_VOID:
            case SCSpecType.SCSpecTypeEnum.SC_SPEC_TYPE_ERROR:
            case SCSpecType.SCSpecTypeEnum.SC_SPEC_TYPE_U32:
            case SCSpecType.SCSpecTypeEnum.SC_SPEC_TYPE_I32:
            case SCSpecType.SCSpecTypeEnum.SC_SPEC_TYPE_U64:
            case SCSpecType.SCSpecTypeEnum.SC_SPEC_TYPE_I64:
            case SCSpecType.SCSpecTypeEnum.SC_SPEC_TYPE_TIMEPOINT:
            case SCSpecType.SCSpecTypeEnum.SC_SPEC_TYPE_DURATION:
            case SCSpecType.SCSpecTypeEnum.SC_SPEC_TYPE_U128:
            case SCSpecType.SCSpecTypeEnum.SC_SPEC_TYPE_I128:
            case SCSpecType.SCSpecTypeEnum.SC_SPEC_TYPE_U256:
            case SCSpecType.SCSpecTypeEnum.SC_SPEC_TYPE_I256:
            case SCSpecType.SCSpecTypeEnum.SC_SPEC_TYPE_BYTES:
            case SCSpecType.SCSpecTypeEnum.SC_SPEC_TYPE_STRING:
            case SCSpecType.SCSpecTypeEnum.SC_SPEC_TYPE_SYMBOL:
            case SCSpecType.SCSpecTypeEnum.SC_SPEC_TYPE_ADDRESS:
            case SCSpecType.SCSpecTypeEnum.SC_SPEC_TYPE_MUXED_ADDRESS:
                break;
            case SCSpecType.SCSpecTypeEnum.SC_SPEC_TYPE_OPTION:
                SCSpecTypeOption.Encode(stream, encodedSCSpecTypeDef.Option);
                break;
            case SCSpecType.SCSpecTypeEnum.SC_SPEC_TYPE_RESULT:
                SCSpecTypeResult.Encode(stream, encodedSCSpecTypeDef.Result);
                break;
            case SCSpecType.SCSpecTypeEnum.SC_SPEC_TYPE_VEC:
                SCSpecTypeVec.Encode(stream, encodedSCSpecTypeDef.Vec);
                break;
            case SCSpecType.SCSpecTypeEnum.SC_SPEC_TYPE_MAP:
                SCSpecTypeMap.Encode(stream, encodedSCSpecTypeDef.Map);
                break;
            case SCSpecType.SCSpecTypeEnum.SC_SPEC_TYPE_TUPLE:
                SCSpecTypeTuple.Encode(stream, encodedSCSpecTypeDef.Tuple);
                break;
            case SCSpecType.SCSpecTypeEnum.SC_SPEC_TYPE_BYTES_N:
                SCSpecTypeBytesN.Encode(stream, encodedSCSpecTypeDef.BytesN);
                break;
            case SCSpecType.SCSpecTypeEnum.SC_SPEC_TYPE_UDT:
                SCSpecTypeUDT.Encode(stream, encodedSCSpecTypeDef.Udt);
                break;
        }
    }

    public static SCSpecTypeDef Decode(XdrDataInputStream stream)
    {
        var decodedSCSpecTypeDef = new SCSpecTypeDef();
        var discriminant = SCSpecType.Decode(stream);
        decodedSCSpecTypeDef.Discriminant = discriminant;
        switch (decodedSCSpecTypeDef.Discriminant.InnerValue)
        {
            case SCSpecType.SCSpecTypeEnum.SC_SPEC_TYPE_VAL:
            case SCSpecType.SCSpecTypeEnum.SC_SPEC_TYPE_BOOL:
            case SCSpecType.SCSpecTypeEnum.SC_SPEC_TYPE_VOID:
            case SCSpecType.SCSpecTypeEnum.SC_SPEC_TYPE_ERROR:
            case SCSpecType.SCSpecTypeEnum.SC_SPEC_TYPE_U32:
            case SCSpecType.SCSpecTypeEnum.SC_SPEC_TYPE_I32:
            case SCSpecType.SCSpecTypeEnum.SC_SPEC_TYPE_U64:
            case SCSpecType.SCSpecTypeEnum.SC_SPEC_TYPE_I64:
            case SCSpecType.SCSpecTypeEnum.SC_SPEC_TYPE_TIMEPOINT:
            case SCSpecType.SCSpecTypeEnum.SC_SPEC_TYPE_DURATION:
            case SCSpecType.SCSpecTypeEnum.SC_SPEC_TYPE_U128:
            case SCSpecType.SCSpecTypeEnum.SC_SPEC_TYPE_I128:
            case SCSpecType.SCSpecTypeEnum.SC_SPEC_TYPE_U256:
            case SCSpecType.SCSpecTypeEnum.SC_SPEC_TYPE_I256:
            case SCSpecType.SCSpecTypeEnum.SC_SPEC_TYPE_BYTES:
            case SCSpecType.SCSpecTypeEnum.SC_SPEC_TYPE_STRING:
            case SCSpecType.SCSpecTypeEnum.SC_SPEC_TYPE_SYMBOL:
            case SCSpecType.SCSpecTypeEnum.SC_SPEC_TYPE_ADDRESS:
            case SCSpecType.SCSpecTypeEnum.SC_SPEC_TYPE_MUXED_ADDRESS:
                break;
            case SCSpecType.SCSpecTypeEnum.SC_SPEC_TYPE_OPTION:
                decodedSCSpecTypeDef.Option = SCSpecTypeOption.Decode(stream);
                break;
            case SCSpecType.SCSpecTypeEnum.SC_SPEC_TYPE_RESULT:
                decodedSCSpecTypeDef.Result = SCSpecTypeResult.Decode(stream);
                break;
            case SCSpecType.SCSpecTypeEnum.SC_SPEC_TYPE_VEC:
                decodedSCSpecTypeDef.Vec = SCSpecTypeVec.Decode(stream);
                break;
            case SCSpecType.SCSpecTypeEnum.SC_SPEC_TYPE_MAP:
                decodedSCSpecTypeDef.Map = SCSpecTypeMap.Decode(stream);
                break;
            case SCSpecType.SCSpecTypeEnum.SC_SPEC_TYPE_TUPLE:
                decodedSCSpecTypeDef.Tuple = SCSpecTypeTuple.Decode(stream);
                break;
            case SCSpecType.SCSpecTypeEnum.SC_SPEC_TYPE_BYTES_N:
                decodedSCSpecTypeDef.BytesN = SCSpecTypeBytesN.Decode(stream);
                break;
            case SCSpecType.SCSpecTypeEnum.SC_SPEC_TYPE_UDT:
                decodedSCSpecTypeDef.Udt = SCSpecTypeUDT.Decode(stream);
                break;
        }
        return decodedSCSpecTypeDef;
    }
}