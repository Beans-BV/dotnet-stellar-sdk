// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

using System;

namespace StellarDotnetSdk.Xdr;

// === xdr source ============================================================

//  enum RestoreFootprintResultCode
//  {
//      // codes considered as "success" for the operation
//      RESTORE_FOOTPRINT_SUCCESS = 0,
//  
//      // codes considered as "failure" for the operation
//      RESTORE_FOOTPRINT_MALFORMED = -1,
//      RESTORE_FOOTPRINT_RESOURCE_LIMIT_EXCEEDED = -2,
//      RESTORE_FOOTPRINT_INSUFFICIENT_REFUNDABLE_FEE = -3
//  };

//  ===========================================================================
public class RestoreFootprintResultCode
{
    public enum RestoreFootprintResultCodeEnum
    {
        RESTORE_FOOTPRINT_SUCCESS = 0,
        RESTORE_FOOTPRINT_MALFORMED = -1,
        RESTORE_FOOTPRINT_RESOURCE_LIMIT_EXCEEDED = -2,
        RESTORE_FOOTPRINT_INSUFFICIENT_REFUNDABLE_FEE = -3
    }

    public RestoreFootprintResultCodeEnum InnerValue { get; set; }

    public static RestoreFootprintResultCode Create(RestoreFootprintResultCodeEnum v)
    {
        return new RestoreFootprintResultCode
        {
            InnerValue = v
        };
    }

    public static RestoreFootprintResultCode Decode(XdrDataInputStream stream)
    {
        var value = stream.ReadInt();
        switch (value)
        {
            case 0: return Create(RestoreFootprintResultCodeEnum.RESTORE_FOOTPRINT_SUCCESS);
            case -1: return Create(RestoreFootprintResultCodeEnum.RESTORE_FOOTPRINT_MALFORMED);
            case -2: return Create(RestoreFootprintResultCodeEnum.RESTORE_FOOTPRINT_RESOURCE_LIMIT_EXCEEDED);
            case -3: return Create(RestoreFootprintResultCodeEnum.RESTORE_FOOTPRINT_INSUFFICIENT_REFUNDABLE_FEE);
            default:
                throw new Exception("Unknown enum value: " + value);
        }
    }

    public static void Encode(XdrDataOutputStream stream, RestoreFootprintResultCode value)
    {
        stream.WriteInt((int)value.InnerValue);
    }
}