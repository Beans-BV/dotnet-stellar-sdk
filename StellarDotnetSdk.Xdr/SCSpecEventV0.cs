// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

namespace StellarDotnetSdk.Xdr;

// === xdr source ============================================================

//  struct SCSpecEventV0
//  {
//      string doc<SC_SPEC_DOC_LIMIT>;
//      string lib<80>;
//      SCSymbol name;
//      SCSymbol prefixTopics<2>;
//      SCSpecEventParamV0 params<50>;
//      SCSpecEventDataFormat dataFormat;
//  };

//  ===========================================================================
public class SCSpecEventV0
{
    public string Doc { get; set; }
    public string Lib { get; set; }
    public SCSymbol Name { get; set; }
    public SCSymbol[] PrefixTopics { get; set; }
    public SCSpecEventParamV0[] Params { get; set; }
    public SCSpecEventDataFormat DataFormat { get; set; }

    public static void Encode(XdrDataOutputStream stream, SCSpecEventV0 encodedSCSpecEventV0)
    {
        stream.WriteString(encodedSCSpecEventV0.Doc);
        stream.WriteString(encodedSCSpecEventV0.Lib);
        SCSymbol.Encode(stream, encodedSCSpecEventV0.Name);
        var prefixTopicssize = encodedSCSpecEventV0.PrefixTopics.Length;
        stream.WriteInt(prefixTopicssize);
        for (var i = 0; i < prefixTopicssize; i++)
        {
            SCSymbol.Encode(stream, encodedSCSpecEventV0.PrefixTopics[i]);
        }
        var paramssize = encodedSCSpecEventV0.Params.Length;
        stream.WriteInt(paramssize);
        for (var i = 0; i < paramssize; i++)
        {
            SCSpecEventParamV0.Encode(stream, encodedSCSpecEventV0.Params[i]);
        }
        SCSpecEventDataFormat.Encode(stream, encodedSCSpecEventV0.DataFormat);
    }

    public static SCSpecEventV0 Decode(XdrDataInputStream stream)
    {
        var decodedSCSpecEventV0 = new SCSpecEventV0();
        decodedSCSpecEventV0.Doc = stream.ReadString();
        decodedSCSpecEventV0.Lib = stream.ReadString();
        decodedSCSpecEventV0.Name = SCSymbol.Decode(stream);
        var prefixTopicssize = stream.ReadInt();
        decodedSCSpecEventV0.PrefixTopics = new SCSymbol[prefixTopicssize];
        for (var i = 0; i < prefixTopicssize; i++)
        {
            decodedSCSpecEventV0.PrefixTopics[i] = SCSymbol.Decode(stream);
        }
        var paramssize = stream.ReadInt();
        decodedSCSpecEventV0.Params = new SCSpecEventParamV0[paramssize];
        for (var i = 0; i < paramssize; i++)
        {
            decodedSCSpecEventV0.Params[i] = SCSpecEventParamV0.Decode(stream);
        }
        decodedSCSpecEventV0.DataFormat = SCSpecEventDataFormat.Decode(stream);
        return decodedSCSpecEventV0;
    }
}