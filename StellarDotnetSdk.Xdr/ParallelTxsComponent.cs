// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

namespace StellarDotnetSdk.Xdr;

// === xdr source ============================================================

//  struct ParallelTxsComponent
//  {
//    int64* baseFee;
//    // A sequence of stages that *may* have arbitrary data dependencies between
//    // each other, i.e. in a general case the stage execution order may not be
//    // arbitrarily shuffled without affecting the end result.
//    ParallelTxExecutionStage executionStages<>;
//  };

//  ===========================================================================
public class ParallelTxsComponent
{
    public Int64 BaseFee { get; set; }
    public ParallelTxExecutionStage[] ExecutionStages { get; set; }

    public static void Encode(XdrDataOutputStream stream, ParallelTxsComponent encodedParallelTxsComponent)
    {
        if (encodedParallelTxsComponent.BaseFee != null)
        {
            stream.WriteInt(1);
            Int64.Encode(stream, encodedParallelTxsComponent.BaseFee);
        }
        else
        {
            stream.WriteInt(0);
        }
        var executionStagessize = encodedParallelTxsComponent.ExecutionStages.Length;
        stream.WriteInt(executionStagessize);
        for (var i = 0; i < executionStagessize; i++)
        {
            ParallelTxExecutionStage.Encode(stream, encodedParallelTxsComponent.ExecutionStages[i]);
        }
    }

    public static ParallelTxsComponent Decode(XdrDataInputStream stream)
    {
        var decodedParallelTxsComponent = new ParallelTxsComponent();
        var BaseFeePresent = stream.ReadInt();
        if (BaseFeePresent != 0)
        {
            decodedParallelTxsComponent.BaseFee = Int64.Decode(stream);
        }
        var executionStagessize = stream.ReadInt();
        decodedParallelTxsComponent.ExecutionStages = new ParallelTxExecutionStage[executionStagessize];
        for (var i = 0; i < executionStagessize; i++)
        {
            decodedParallelTxsComponent.ExecutionStages[i] = ParallelTxExecutionStage.Decode(stream);
        }
        return decodedParallelTxsComponent;
    }
}