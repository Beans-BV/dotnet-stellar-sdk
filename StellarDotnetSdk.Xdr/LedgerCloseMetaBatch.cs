// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

namespace StellarDotnetSdk.Xdr;

// === xdr source ============================================================

//  struct LedgerCloseMetaBatch
//  {
//      // starting ledger sequence number in the batch
//      uint32 startSequence;
//  
//      // ending ledger sequence number in the batch
//      uint32 endSequence;
//  
//      // Ledger close meta for each ledger within the batch
//      LedgerCloseMeta ledgerCloseMetas<>;
//  };

//  ===========================================================================
public class LedgerCloseMetaBatch
{
    public Uint32 StartSequence { get; set; }
    public Uint32 EndSequence { get; set; }
    public LedgerCloseMeta[] LedgerCloseMetas { get; set; }

    public static void Encode(XdrDataOutputStream stream, LedgerCloseMetaBatch encodedLedgerCloseMetaBatch)
    {
        Uint32.Encode(stream, encodedLedgerCloseMetaBatch.StartSequence);
        Uint32.Encode(stream, encodedLedgerCloseMetaBatch.EndSequence);
        var ledgerCloseMetassize = encodedLedgerCloseMetaBatch.LedgerCloseMetas.Length;
        stream.WriteInt(ledgerCloseMetassize);
        for (var i = 0; i < ledgerCloseMetassize; i++)
        {
            LedgerCloseMeta.Encode(stream, encodedLedgerCloseMetaBatch.LedgerCloseMetas[i]);
        }
    }

    public static LedgerCloseMetaBatch Decode(XdrDataInputStream stream)
    {
        var decodedLedgerCloseMetaBatch = new LedgerCloseMetaBatch();
        decodedLedgerCloseMetaBatch.StartSequence = Uint32.Decode(stream);
        decodedLedgerCloseMetaBatch.EndSequence = Uint32.Decode(stream);
        var ledgerCloseMetassize = stream.ReadInt();
        decodedLedgerCloseMetaBatch.LedgerCloseMetas = new LedgerCloseMeta[ledgerCloseMetassize];
        for (var i = 0; i < ledgerCloseMetassize; i++)
        {
            decodedLedgerCloseMetaBatch.LedgerCloseMetas[i] = LedgerCloseMeta.Decode(stream);
        }
        return decodedLedgerCloseMetaBatch;
    }
}