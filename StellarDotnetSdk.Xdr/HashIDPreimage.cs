// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

namespace StellarDotnetSdk.Xdr;

// === xdr source ============================================================

//  union HashIDPreimage switch (EnvelopeType type)
//  {
//  case ENVELOPE_TYPE_OP_ID:
//      struct
//      {
//          AccountID sourceAccount;
//          SequenceNumber seqNum;
//          uint32 opNum;
//      } operationID;
//  case ENVELOPE_TYPE_POOL_REVOKE_OP_ID:
//      struct
//      {
//          AccountID sourceAccount;
//          SequenceNumber seqNum; 
//          uint32 opNum;
//          PoolID liquidityPoolID;
//          Asset asset;
//      } revokeID;
//  case ENVELOPE_TYPE_CONTRACT_ID:
//      struct
//      {
//          Hash networkID;
//          ContractIDPreimage contractIDPreimage;
//      } contractID;
//  case ENVELOPE_TYPE_SOROBAN_AUTHORIZATION:
//      struct
//      {
//          Hash networkID;
//          int64 nonce;
//          uint32 signatureExpirationLedger;
//          SorobanAuthorizedInvocation invocation;
//      } sorobanAuthorization;
//  };

//  ===========================================================================
public class HashIDPreimage
{
    public EnvelopeType Discriminant { get; set; } = new();

    public HashIDPreimageOperationID OperationID { get; set; }
    public HashIDPreimageRevokeID RevokeID { get; set; }
    public HashIDPreimageContractID ContractID { get; set; }
    public HashIDPreimageSorobanAuthorization SorobanAuthorization { get; set; }

    public static void Encode(XdrDataOutputStream stream, HashIDPreimage encodedHashIDPreimage)
    {
        stream.WriteInt((int)encodedHashIDPreimage.Discriminant.InnerValue);
        switch (encodedHashIDPreimage.Discriminant.InnerValue)
        {
            case EnvelopeType.EnvelopeTypeEnum.ENVELOPE_TYPE_OP_ID:
                HashIDPreimageOperationID.Encode(stream, encodedHashIDPreimage.OperationID);
                break;
            case EnvelopeType.EnvelopeTypeEnum.ENVELOPE_TYPE_POOL_REVOKE_OP_ID:
                HashIDPreimageRevokeID.Encode(stream, encodedHashIDPreimage.RevokeID);
                break;
            case EnvelopeType.EnvelopeTypeEnum.ENVELOPE_TYPE_CONTRACT_ID:
                HashIDPreimageContractID.Encode(stream, encodedHashIDPreimage.ContractID);
                break;
            case EnvelopeType.EnvelopeTypeEnum.ENVELOPE_TYPE_SOROBAN_AUTHORIZATION:
                HashIDPreimageSorobanAuthorization.Encode(stream, encodedHashIDPreimage.SorobanAuthorization);
                break;
        }
    }

    public static HashIDPreimage Decode(XdrDataInputStream stream)
    {
        var decodedHashIDPreimage = new HashIDPreimage();
        var discriminant = EnvelopeType.Decode(stream);
        decodedHashIDPreimage.Discriminant = discriminant;
        switch (decodedHashIDPreimage.Discriminant.InnerValue)
        {
            case EnvelopeType.EnvelopeTypeEnum.ENVELOPE_TYPE_OP_ID:
                decodedHashIDPreimage.OperationID = HashIDPreimageOperationID.Decode(stream);
                break;
            case EnvelopeType.EnvelopeTypeEnum.ENVELOPE_TYPE_POOL_REVOKE_OP_ID:
                decodedHashIDPreimage.RevokeID = HashIDPreimageRevokeID.Decode(stream);
                break;
            case EnvelopeType.EnvelopeTypeEnum.ENVELOPE_TYPE_CONTRACT_ID:
                decodedHashIDPreimage.ContractID = HashIDPreimageContractID.Decode(stream);
                break;
            case EnvelopeType.EnvelopeTypeEnum.ENVELOPE_TYPE_SOROBAN_AUTHORIZATION:
                decodedHashIDPreimage.SorobanAuthorization = HashIDPreimageSorobanAuthorization.Decode(stream);
                break;
        }

        return decodedHashIDPreimage;
    }

    public class HashIDPreimageOperationID
    {
        public AccountID SourceAccount { get; set; }
        public SequenceNumber SeqNum { get; set; }
        public Uint32 OpNum { get; set; }

        public static void Encode(XdrDataOutputStream stream,
            HashIDPreimageOperationID encodedHashIDPreimageOperationID)
        {
            AccountID.Encode(stream, encodedHashIDPreimageOperationID.SourceAccount);
            SequenceNumber.Encode(stream, encodedHashIDPreimageOperationID.SeqNum);
            Uint32.Encode(stream, encodedHashIDPreimageOperationID.OpNum);
        }

        public static HashIDPreimageOperationID Decode(XdrDataInputStream stream)
        {
            var decodedHashIDPreimageOperationID = new HashIDPreimageOperationID();
            decodedHashIDPreimageOperationID.SourceAccount = AccountID.Decode(stream);
            decodedHashIDPreimageOperationID.SeqNum = SequenceNumber.Decode(stream);
            decodedHashIDPreimageOperationID.OpNum = Uint32.Decode(stream);
            return decodedHashIDPreimageOperationID;
        }
    }

    public class HashIDPreimageRevokeID
    {
        public AccountID SourceAccount { get; set; }
        public SequenceNumber SeqNum { get; set; }
        public Uint32 OpNum { get; set; }
        public PoolID LiquidityPoolID { get; set; }
        public Asset Asset { get; set; }

        public static void Encode(XdrDataOutputStream stream, HashIDPreimageRevokeID encodedHashIDPreimageRevokeID)
        {
            AccountID.Encode(stream, encodedHashIDPreimageRevokeID.SourceAccount);
            SequenceNumber.Encode(stream, encodedHashIDPreimageRevokeID.SeqNum);
            Uint32.Encode(stream, encodedHashIDPreimageRevokeID.OpNum);
            PoolID.Encode(stream, encodedHashIDPreimageRevokeID.LiquidityPoolID);
            Asset.Encode(stream, encodedHashIDPreimageRevokeID.Asset);
        }

        public static HashIDPreimageRevokeID Decode(XdrDataInputStream stream)
        {
            var decodedHashIDPreimageRevokeID = new HashIDPreimageRevokeID();
            decodedHashIDPreimageRevokeID.SourceAccount = AccountID.Decode(stream);
            decodedHashIDPreimageRevokeID.SeqNum = SequenceNumber.Decode(stream);
            decodedHashIDPreimageRevokeID.OpNum = Uint32.Decode(stream);
            decodedHashIDPreimageRevokeID.LiquidityPoolID = PoolID.Decode(stream);
            decodedHashIDPreimageRevokeID.Asset = Asset.Decode(stream);
            return decodedHashIDPreimageRevokeID;
        }
    }

    public class HashIDPreimageContractID
    {
        public Hash NetworkID { get; set; }
        public ContractIDPreimage ContractIDPreimage { get; set; }

        public static void Encode(XdrDataOutputStream stream, HashIDPreimageContractID encodedHashIDPreimageContractID)
        {
            Hash.Encode(stream, encodedHashIDPreimageContractID.NetworkID);
            ContractIDPreimage.Encode(stream, encodedHashIDPreimageContractID.ContractIDPreimage);
        }

        public static HashIDPreimageContractID Decode(XdrDataInputStream stream)
        {
            var decodedHashIDPreimageContractID = new HashIDPreimageContractID();
            decodedHashIDPreimageContractID.NetworkID = Hash.Decode(stream);
            decodedHashIDPreimageContractID.ContractIDPreimage = ContractIDPreimage.Decode(stream);
            return decodedHashIDPreimageContractID;
        }
    }

    public class HashIDPreimageSorobanAuthorization
    {
        public Hash NetworkID { get; set; }
        public Int64 Nonce { get; set; }
        public Uint32 SignatureExpirationLedger { get; set; }
        public SorobanAuthorizedInvocation Invocation { get; set; }

        public static void Encode(XdrDataOutputStream stream,
            HashIDPreimageSorobanAuthorization encodedHashIDPreimageSorobanAuthorization)
        {
            Hash.Encode(stream, encodedHashIDPreimageSorobanAuthorization.NetworkID);
            Int64.Encode(stream, encodedHashIDPreimageSorobanAuthorization.Nonce);
            Uint32.Encode(stream, encodedHashIDPreimageSorobanAuthorization.SignatureExpirationLedger);
            SorobanAuthorizedInvocation.Encode(stream, encodedHashIDPreimageSorobanAuthorization.Invocation);
        }

        public static HashIDPreimageSorobanAuthorization Decode(XdrDataInputStream stream)
        {
            var decodedHashIDPreimageSorobanAuthorization = new HashIDPreimageSorobanAuthorization();
            decodedHashIDPreimageSorobanAuthorization.NetworkID = Hash.Decode(stream);
            decodedHashIDPreimageSorobanAuthorization.Nonce = Int64.Decode(stream);
            decodedHashIDPreimageSorobanAuthorization.SignatureExpirationLedger = Uint32.Decode(stream);
            decodedHashIDPreimageSorobanAuthorization.Invocation = SorobanAuthorizedInvocation.Decode(stream);
            return decodedHashIDPreimageSorobanAuthorization;
        }
    }
}