// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

namespace StellarDotnetSdk.Xdr;

// === xdr source ============================================================

//  struct ConfigSettingContractLedgerCostExtV0
//  {
//      // Maximum number of RO+RW entries in the transaction footprint.
//      uint32 txMaxFootprintEntries;
//      // Fee per 1 KB of data written to the ledger.
//      // Unlike the rent fee, this is a flat fee that is charged for any ledger
//      // write, independent of the type of the entry being written.
//      int64 feeWrite1KB;
//  };

//  ===========================================================================
public class ConfigSettingContractLedgerCostExtV0
{
    public Uint32 TxMaxFootprintEntries { get; set; }
    public Int64 FeeWrite1KB { get; set; }

    public static void Encode(XdrDataOutputStream stream,
        ConfigSettingContractLedgerCostExtV0 encodedConfigSettingContractLedgerCostExtV0)
    {
        Uint32.Encode(stream, encodedConfigSettingContractLedgerCostExtV0.TxMaxFootprintEntries);
        Int64.Encode(stream, encodedConfigSettingContractLedgerCostExtV0.FeeWrite1KB);
    }

    public static ConfigSettingContractLedgerCostExtV0 Decode(XdrDataInputStream stream)
    {
        var decodedConfigSettingContractLedgerCostExtV0 = new ConfigSettingContractLedgerCostExtV0();
        decodedConfigSettingContractLedgerCostExtV0.TxMaxFootprintEntries = Uint32.Decode(stream);
        decodedConfigSettingContractLedgerCostExtV0.FeeWrite1KB = Int64.Decode(stream);
        return decodedConfigSettingContractLedgerCostExtV0;
    }
}