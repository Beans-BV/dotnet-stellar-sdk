// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

namespace StellarDotnetSdk.Xdr;

// === xdr source ============================================================

//  struct ContractEvent
//  {
//      // We can use this to add more fields, or because it
//      // is first, to change ContractEvent into a union.
//      ExtensionPoint ext;
//  
//      Hash* contractID;
//      ContractEventType type;
//  
//      union switch (int v)
//      {
//      case 0:
//          struct
//          {
//              SCVal topics<>;
//              SCVal data;
//          } v0;
//      }
//      body;
//  };

//  ===========================================================================
public class ContractEvent
{
    public ExtensionPoint Ext { get; set; }
    public Hash? ContractID { get; set; }
    public ContractEventType Type { get; set; }
    public ContractEventBody Body { get; set; }

    public static void Encode(XdrDataOutputStream stream, ContractEvent encodedContractEvent)
    {
        ExtensionPoint.Encode(stream, encodedContractEvent.Ext);
        if (encodedContractEvent.ContractID != null)
        {
            stream.WriteInt(1);
            Hash.Encode(stream, encodedContractEvent.ContractID);
        }
        else
        {
            stream.WriteInt(0);
        }

        ContractEventType.Encode(stream, encodedContractEvent.Type);
        ContractEventBody.Encode(stream, encodedContractEvent.Body);
    }

    public static ContractEvent Decode(XdrDataInputStream stream)
    {
        var decodedContractEvent = new ContractEvent();
        decodedContractEvent.Ext = ExtensionPoint.Decode(stream);
        var ContractIDPresent = stream.ReadInt();
        if (ContractIDPresent != 0) decodedContractEvent.ContractID = Hash.Decode(stream);
        decodedContractEvent.Type = ContractEventType.Decode(stream);
        decodedContractEvent.Body = ContractEventBody.Decode(stream);
        return decodedContractEvent;
    }

    public class ContractEventBody
    {
        public int Discriminant { get; set; }

        public ContractEventV0 V0 { get; set; }

        public static void Encode(XdrDataOutputStream stream, ContractEventBody encodedContractEventBody)
        {
            stream.WriteInt(encodedContractEventBody.Discriminant);
            switch (encodedContractEventBody.Discriminant)
            {
                case 0:
                    ContractEventV0.Encode(stream, encodedContractEventBody.V0);
                    break;
            }
        }

        public static ContractEventBody Decode(XdrDataInputStream stream)
        {
            var decodedContractEventBody = new ContractEventBody();
            var discriminant = stream.ReadInt();
            decodedContractEventBody.Discriminant = discriminant;
            switch (decodedContractEventBody.Discriminant)
            {
                case 0:
                    decodedContractEventBody.V0 = ContractEventV0.Decode(stream);
                    break;
            }

            return decodedContractEventBody;
        }

        public class ContractEventV0
        {
            public SCVal[] Topics { get; set; }
            public SCVal Data { get; set; }

            public static void Encode(XdrDataOutputStream stream, ContractEventV0 encodedContractEventV0)
            {
                var topicssize = encodedContractEventV0.Topics.Length;
                stream.WriteInt(topicssize);
                for (var i = 0; i < topicssize; i++) SCVal.Encode(stream, encodedContractEventV0.Topics[i]);
                SCVal.Encode(stream, encodedContractEventV0.Data);
            }

            public static ContractEventV0 Decode(XdrDataInputStream stream)
            {
                var decodedContractEventV0 = new ContractEventV0();
                var topicssize = stream.ReadInt();
                decodedContractEventV0.Topics = new SCVal[topicssize];
                for (var i = 0; i < topicssize; i++) decodedContractEventV0.Topics[i] = SCVal.Decode(stream);
                decodedContractEventV0.Data = SCVal.Decode(stream);
                return decodedContractEventV0;
            }
        }
    }
}