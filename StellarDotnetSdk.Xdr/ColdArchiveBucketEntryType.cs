// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

using System;

namespace StellarDotnetSdk.Xdr;

// === xdr source ============================================================

//  enum ColdArchiveBucketEntryType
//  {
//      COLD_ARCHIVE_METAENTRY     = -1,  // Bucket metadata, should come first.
//      COLD_ARCHIVE_ARCHIVED_LEAF = 0,   // Full LedgerEntry that was archived during the epoch
//      COLD_ARCHIVE_DELETED_LEAF  = 1,   // LedgerKey that was deleted during the epoch
//      COLD_ARCHIVE_BOUNDARY_LEAF = 2,   // Dummy leaf representing low/high bound
//      COLD_ARCHIVE_HASH          = 3    // Intermediary Merkle hash entry
//  };

//  ===========================================================================
public class ColdArchiveBucketEntryType
{
    public enum ColdArchiveBucketEntryTypeEnum
    {
        COLD_ARCHIVE_METAENTRY = -1,
        COLD_ARCHIVE_ARCHIVED_LEAF = 0,
        COLD_ARCHIVE_DELETED_LEAF = 1,
        COLD_ARCHIVE_BOUNDARY_LEAF = 2,
        COLD_ARCHIVE_HASH = 3,
    }

    public ColdArchiveBucketEntryTypeEnum InnerValue { get; set; }

    public static ColdArchiveBucketEntryType Create(ColdArchiveBucketEntryTypeEnum v)
    {
        return new ColdArchiveBucketEntryType
        {
            InnerValue = v,
        };
    }

    public static ColdArchiveBucketEntryType Decode(XdrDataInputStream stream)
    {
        var value = stream.ReadInt();
        switch (value)
        {
            case -1: return Create(ColdArchiveBucketEntryTypeEnum.COLD_ARCHIVE_METAENTRY);
            case 0: return Create(ColdArchiveBucketEntryTypeEnum.COLD_ARCHIVE_ARCHIVED_LEAF);
            case 1: return Create(ColdArchiveBucketEntryTypeEnum.COLD_ARCHIVE_DELETED_LEAF);
            case 2: return Create(ColdArchiveBucketEntryTypeEnum.COLD_ARCHIVE_BOUNDARY_LEAF);
            case 3: return Create(ColdArchiveBucketEntryTypeEnum.COLD_ARCHIVE_HASH);
            default:
                throw new Exception("Unknown enum value: " + value);
        }
    }

    public static void Encode(XdrDataOutputStream stream, ColdArchiveBucketEntryType value)
    {
        stream.WriteInt((int)value.InnerValue);
    }
}