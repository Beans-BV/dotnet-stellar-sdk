// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

namespace StellarDotnetSdk.Xdr;

// === xdr source ============================================================

//  struct NonexistenceProofBody
//  {
//      ColdArchiveBucketEntry entriesToProve<>;
//  
//      // Vector of vectors, where proofLevels[level]
//      // contains all HashNodes that correspond with that level
//      ProofLevel proofLevels<>;
//  };

//  ===========================================================================
public class NonexistenceProofBody
{
    public ColdArchiveBucketEntry[] EntriesToProve { get; set; }
    public ProofLevel[] ProofLevels { get; set; }

    public static void Encode(XdrDataOutputStream stream, NonexistenceProofBody encodedNonexistenceProofBody)
    {
        var entriesToProvesize = encodedNonexistenceProofBody.EntriesToProve.Length;
        stream.WriteInt(entriesToProvesize);
        for (var i = 0; i < entriesToProvesize; i++)
        {
            ColdArchiveBucketEntry.Encode(stream, encodedNonexistenceProofBody.EntriesToProve[i]);
        }
        var proofLevelssize = encodedNonexistenceProofBody.ProofLevels.Length;
        stream.WriteInt(proofLevelssize);
        for (var i = 0; i < proofLevelssize; i++)
        {
            ProofLevel.Encode(stream, encodedNonexistenceProofBody.ProofLevels[i]);
        }
    }

    public static NonexistenceProofBody Decode(XdrDataInputStream stream)
    {
        var decodedNonexistenceProofBody = new NonexistenceProofBody();
        var entriesToProvesize = stream.ReadInt();
        decodedNonexistenceProofBody.EntriesToProve = new ColdArchiveBucketEntry[entriesToProvesize];
        for (var i = 0; i < entriesToProvesize; i++)
        {
            decodedNonexistenceProofBody.EntriesToProve[i] = ColdArchiveBucketEntry.Decode(stream);
        }
        var proofLevelssize = stream.ReadInt();
        decodedNonexistenceProofBody.ProofLevels = new ProofLevel[proofLevelssize];
        for (var i = 0; i < proofLevelssize; i++)
        {
            decodedNonexistenceProofBody.ProofLevels[i] = ProofLevel.Decode(stream);
        }
        return decodedNonexistenceProofBody;
    }
}