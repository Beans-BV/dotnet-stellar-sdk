// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

namespace StellarDotnetSdk.Xdr;

// === xdr source ============================================================

//  struct SerializedBinaryFuseFilter
//  {
//      BinaryFuseFilterType type;
//  
//      // Seed used to hash input to filter
//      ShortHashSeed inputHashSeed;
//  
//      // Seed used for internal filter hash operations
//      ShortHashSeed filterSeed;
//      uint32 segmentLength;
//      uint32 segementLengthMask;
//      uint32 segmentCount;
//      uint32 segmentCountLength;
//      uint32 fingerprintLength; // Length in terms of element count, not bytes
//  
//      // Array of uint8_t, uint16_t, or uint32_t depending on filter type
//      opaque fingerprints<>;
//  };

//  ===========================================================================
public class SerializedBinaryFuseFilter
{
    public BinaryFuseFilterType Type { get; set; }
    public ShortHashSeed InputHashSeed { get; set; }
    public ShortHashSeed FilterSeed { get; set; }
    public Uint32 SegmentLength { get; set; }
    public Uint32 SegementLengthMask { get; set; }
    public Uint32 SegmentCount { get; set; }
    public Uint32 SegmentCountLength { get; set; }
    public Uint32 FingerprintLength { get; set; }
    public byte[] Fingerprints { get; set; }

    public static void Encode(XdrDataOutputStream stream, SerializedBinaryFuseFilter encodedSerializedBinaryFuseFilter)
    {
        BinaryFuseFilterType.Encode(stream, encodedSerializedBinaryFuseFilter.Type);
        ShortHashSeed.Encode(stream, encodedSerializedBinaryFuseFilter.InputHashSeed);
        ShortHashSeed.Encode(stream, encodedSerializedBinaryFuseFilter.FilterSeed);
        Uint32.Encode(stream, encodedSerializedBinaryFuseFilter.SegmentLength);
        Uint32.Encode(stream, encodedSerializedBinaryFuseFilter.SegementLengthMask);
        Uint32.Encode(stream, encodedSerializedBinaryFuseFilter.SegmentCount);
        Uint32.Encode(stream, encodedSerializedBinaryFuseFilter.SegmentCountLength);
        Uint32.Encode(stream, encodedSerializedBinaryFuseFilter.FingerprintLength);
        var fingerprintssize = encodedSerializedBinaryFuseFilter.Fingerprints.Length;
        stream.WriteInt(fingerprintssize);
        stream.Write(encodedSerializedBinaryFuseFilter.Fingerprints, 0, fingerprintssize);
    }

    public static SerializedBinaryFuseFilter Decode(XdrDataInputStream stream)
    {
        var decodedSerializedBinaryFuseFilter = new SerializedBinaryFuseFilter();
        decodedSerializedBinaryFuseFilter.Type = BinaryFuseFilterType.Decode(stream);
        decodedSerializedBinaryFuseFilter.InputHashSeed = ShortHashSeed.Decode(stream);
        decodedSerializedBinaryFuseFilter.FilterSeed = ShortHashSeed.Decode(stream);
        decodedSerializedBinaryFuseFilter.SegmentLength = Uint32.Decode(stream);
        decodedSerializedBinaryFuseFilter.SegementLengthMask = Uint32.Decode(stream);
        decodedSerializedBinaryFuseFilter.SegmentCount = Uint32.Decode(stream);
        decodedSerializedBinaryFuseFilter.SegmentCountLength = Uint32.Decode(stream);
        decodedSerializedBinaryFuseFilter.FingerprintLength = Uint32.Decode(stream);
        var fingerprintssize = stream.ReadInt();
        decodedSerializedBinaryFuseFilter.Fingerprints = new byte[fingerprintssize];
        stream.Read(decodedSerializedBinaryFuseFilter.Fingerprints, 0, fingerprintssize);
        return decodedSerializedBinaryFuseFilter;
    }
}