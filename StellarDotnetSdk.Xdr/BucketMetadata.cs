// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

namespace StellarDotnetSdk.Xdr;

// === xdr source ============================================================

//  struct BucketMetadata
//  {
//      // Indicates the protocol version used to create / merge this bucket.
//      uint32 ledgerVersion;
//  
//      // reserved for future use
//      union switch (int v)
//      {
//      case 0:
//          void;
//      case 1:
//          BucketListType bucketListType;
//      }
//      ext;
//  };

//  ===========================================================================
public class BucketMetadata
{
    public Uint32 LedgerVersion { get; set; }
    public BucketMetadataExt Ext { get; set; }

    public static void Encode(XdrDataOutputStream stream, BucketMetadata encodedBucketMetadata)
    {
        Uint32.Encode(stream, encodedBucketMetadata.LedgerVersion);
        BucketMetadataExt.Encode(stream, encodedBucketMetadata.Ext);
    }

    public static BucketMetadata Decode(XdrDataInputStream stream)
    {
        var decodedBucketMetadata = new BucketMetadata();
        decodedBucketMetadata.LedgerVersion = Uint32.Decode(stream);
        decodedBucketMetadata.Ext = BucketMetadataExt.Decode(stream);
        return decodedBucketMetadata;
    }

    public class BucketMetadataExt
    {
        public int Discriminant { get; set; }

        public BucketListType BucketListType { get; set; }

        public static void Encode(XdrDataOutputStream stream, BucketMetadataExt encodedBucketMetadataExt)
        {
            stream.WriteInt(encodedBucketMetadataExt.Discriminant);
            switch (encodedBucketMetadataExt.Discriminant)
            {
                case 0:
                    break;
                case 1:
                    BucketListType.Encode(stream, encodedBucketMetadataExt.BucketListType);
                    break;
            }
        }

        public static BucketMetadataExt Decode(XdrDataInputStream stream)
        {
            var decodedBucketMetadataExt = new BucketMetadataExt();
            var discriminant = stream.ReadInt();
            decodedBucketMetadataExt.Discriminant = discriminant;
            switch (decodedBucketMetadataExt.Discriminant)
            {
                case 0:
                    break;
                case 1:
                    decodedBucketMetadataExt.BucketListType = BucketListType.Decode(stream);
                    break;
            }
            return decodedBucketMetadataExt;
        }
    }
}