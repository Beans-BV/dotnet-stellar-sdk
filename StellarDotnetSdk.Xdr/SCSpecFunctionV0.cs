// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

namespace StellarDotnetSdk.Xdr;

// === xdr source ============================================================

//  struct SCSpecFunctionV0
//  {
//      string doc<SC_SPEC_DOC_LIMIT>;
//      SCSymbol name;
//      SCSpecFunctionInputV0 inputs<10>;
//      SCSpecTypeDef outputs<1>;
//  };

//  ===========================================================================
public class SCSpecFunctionV0
{
    public string Doc { get; set; }
    public SCSymbol Name { get; set; }
    public SCSpecFunctionInputV0[] Inputs { get; set; }
    public SCSpecTypeDef[] Outputs { get; set; }

    public static void Encode(XdrDataOutputStream stream, SCSpecFunctionV0 encodedSCSpecFunctionV0)
    {
        stream.WriteString(encodedSCSpecFunctionV0.Doc);
        SCSymbol.Encode(stream, encodedSCSpecFunctionV0.Name);
        var inputssize = encodedSCSpecFunctionV0.Inputs.Length;
        stream.WriteInt(inputssize);
        for (var i = 0; i < inputssize; i++)
        {
            SCSpecFunctionInputV0.Encode(stream, encodedSCSpecFunctionV0.Inputs[i]);
        }
        var outputssize = encodedSCSpecFunctionV0.Outputs.Length;
        stream.WriteInt(outputssize);
        for (var i = 0; i < outputssize; i++)
        {
            SCSpecTypeDef.Encode(stream, encodedSCSpecFunctionV0.Outputs[i]);
        }
    }

    public static SCSpecFunctionV0 Decode(XdrDataInputStream stream)
    {
        var decodedSCSpecFunctionV0 = new SCSpecFunctionV0();
        decodedSCSpecFunctionV0.Doc = stream.ReadString();
        decodedSCSpecFunctionV0.Name = SCSymbol.Decode(stream);
        var inputssize = stream.ReadInt();
        decodedSCSpecFunctionV0.Inputs = new SCSpecFunctionInputV0[inputssize];
        for (var i = 0; i < inputssize; i++)
        {
            decodedSCSpecFunctionV0.Inputs[i] = SCSpecFunctionInputV0.Decode(stream);
        }
        var outputssize = stream.ReadInt();
        decodedSCSpecFunctionV0.Outputs = new SCSpecTypeDef[outputssize];
        for (var i = 0; i < outputssize; i++)
        {
            decodedSCSpecFunctionV0.Outputs[i] = SCSpecTypeDef.Decode(stream);
        }
        return decodedSCSpecFunctionV0;
    }
}