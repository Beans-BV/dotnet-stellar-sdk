// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

namespace StellarDotnetSdk.Xdr;

// === xdr source ============================================================

//  struct ArchivalProof
//  {
//      uint32 epoch; // AST Subtree for this proof
//  
//      union switch (ArchivalProofType t)
//      {
//      case EXISTENCE:
//          NonexistenceProofBody nonexistenceProof;
//      case NONEXISTENCE:
//          ExistenceProofBody existenceProof;
//      } body;
//  };

//  ===========================================================================
public class ArchivalProof
{
    public Uint32 Epoch { get; set; }
    public ArchivalProofBody Body { get; set; }

    public static void Encode(XdrDataOutputStream stream, ArchivalProof encodedArchivalProof)
    {
        Uint32.Encode(stream, encodedArchivalProof.Epoch);
        ArchivalProofBody.Encode(stream, encodedArchivalProof.Body);
    }

    public static ArchivalProof Decode(XdrDataInputStream stream)
    {
        var decodedArchivalProof = new ArchivalProof();
        decodedArchivalProof.Epoch = Uint32.Decode(stream);
        decodedArchivalProof.Body = ArchivalProofBody.Decode(stream);
        return decodedArchivalProof;
    }

    public class ArchivalProofBody
    {
        public ArchivalProofType Discriminant { get; set; } = new();

        public NonexistenceProofBody NonexistenceProof { get; set; }
        public ExistenceProofBody ExistenceProof { get; set; }

        public static void Encode(XdrDataOutputStream stream, ArchivalProofBody encodedArchivalProofBody)
        {
            stream.WriteInt((int)encodedArchivalProofBody.Discriminant.InnerValue);
            switch (encodedArchivalProofBody.Discriminant.InnerValue)
            {
                case ArchivalProofType.ArchivalProofTypeEnum.EXISTENCE:
                    NonexistenceProofBody.Encode(stream, encodedArchivalProofBody.NonexistenceProof);
                    break;
                case ArchivalProofType.ArchivalProofTypeEnum.NONEXISTENCE:
                    ExistenceProofBody.Encode(stream, encodedArchivalProofBody.ExistenceProof);
                    break;
            }
        }

        public static ArchivalProofBody Decode(XdrDataInputStream stream)
        {
            var decodedArchivalProofBody = new ArchivalProofBody();
            var discriminant = ArchivalProofType.Decode(stream);
            decodedArchivalProofBody.Discriminant = discriminant;
            switch (decodedArchivalProofBody.Discriminant.InnerValue)
            {
                case ArchivalProofType.ArchivalProofTypeEnum.EXISTENCE:
                    decodedArchivalProofBody.NonexistenceProof = NonexistenceProofBody.Decode(stream);
                    break;
                case ArchivalProofType.ArchivalProofTypeEnum.NONEXISTENCE:
                    decodedArchivalProofBody.ExistenceProof = ExistenceProofBody.Decode(stream);
                    break;
            }
            return decodedArchivalProofBody;
        }
    }
}