// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

namespace StellarDotnetSdk.Xdr;

// === xdr source ============================================================

//  union LiquidityPoolDepositResult switch (LiquidityPoolDepositResultCode code)
//  {
//  case LIQUIDITY_POOL_DEPOSIT_SUCCESS:
//      void;
//  case LIQUIDITY_POOL_DEPOSIT_MALFORMED:
//  case LIQUIDITY_POOL_DEPOSIT_NO_TRUST:
//  case LIQUIDITY_POOL_DEPOSIT_NOT_AUTHORIZED:
//  case LIQUIDITY_POOL_DEPOSIT_UNDERFUNDED:
//  case LIQUIDITY_POOL_DEPOSIT_LINE_FULL:
//  case LIQUIDITY_POOL_DEPOSIT_BAD_PRICE:
//  case LIQUIDITY_POOL_DEPOSIT_POOL_FULL:
//      void;
//  };

//  ===========================================================================
public class LiquidityPoolDepositResult
{
    public LiquidityPoolDepositResultCode Discriminant { get; set; } = new();

    public static void Encode(XdrDataOutputStream stream, LiquidityPoolDepositResult encodedLiquidityPoolDepositResult)
    {
        stream.WriteInt((int)encodedLiquidityPoolDepositResult.Discriminant.InnerValue);
        switch (encodedLiquidityPoolDepositResult.Discriminant.InnerValue)
        {
            case LiquidityPoolDepositResultCode.LiquidityPoolDepositResultCodeEnum.LIQUIDITY_POOL_DEPOSIT_SUCCESS:
                break;
            case LiquidityPoolDepositResultCode.LiquidityPoolDepositResultCodeEnum.LIQUIDITY_POOL_DEPOSIT_MALFORMED:
            case LiquidityPoolDepositResultCode.LiquidityPoolDepositResultCodeEnum.LIQUIDITY_POOL_DEPOSIT_NO_TRUST:
            case LiquidityPoolDepositResultCode.LiquidityPoolDepositResultCodeEnum
                .LIQUIDITY_POOL_DEPOSIT_NOT_AUTHORIZED:
            case LiquidityPoolDepositResultCode.LiquidityPoolDepositResultCodeEnum.LIQUIDITY_POOL_DEPOSIT_UNDERFUNDED:
            case LiquidityPoolDepositResultCode.LiquidityPoolDepositResultCodeEnum.LIQUIDITY_POOL_DEPOSIT_LINE_FULL:
            case LiquidityPoolDepositResultCode.LiquidityPoolDepositResultCodeEnum.LIQUIDITY_POOL_DEPOSIT_BAD_PRICE:
            case LiquidityPoolDepositResultCode.LiquidityPoolDepositResultCodeEnum.LIQUIDITY_POOL_DEPOSIT_POOL_FULL:
                break;
        }
    }

    public static LiquidityPoolDepositResult Decode(XdrDataInputStream stream)
    {
        var decodedLiquidityPoolDepositResult = new LiquidityPoolDepositResult();
        var discriminant = LiquidityPoolDepositResultCode.Decode(stream);
        decodedLiquidityPoolDepositResult.Discriminant = discriminant;
        switch (decodedLiquidityPoolDepositResult.Discriminant.InnerValue)
        {
            case LiquidityPoolDepositResultCode.LiquidityPoolDepositResultCodeEnum.LIQUIDITY_POOL_DEPOSIT_SUCCESS:
                break;
            case LiquidityPoolDepositResultCode.LiquidityPoolDepositResultCodeEnum.LIQUIDITY_POOL_DEPOSIT_MALFORMED:
            case LiquidityPoolDepositResultCode.LiquidityPoolDepositResultCodeEnum.LIQUIDITY_POOL_DEPOSIT_NO_TRUST:
            case LiquidityPoolDepositResultCode.LiquidityPoolDepositResultCodeEnum
                .LIQUIDITY_POOL_DEPOSIT_NOT_AUTHORIZED:
            case LiquidityPoolDepositResultCode.LiquidityPoolDepositResultCodeEnum.LIQUIDITY_POOL_DEPOSIT_UNDERFUNDED:
            case LiquidityPoolDepositResultCode.LiquidityPoolDepositResultCodeEnum.LIQUIDITY_POOL_DEPOSIT_LINE_FULL:
            case LiquidityPoolDepositResultCode.LiquidityPoolDepositResultCodeEnum.LIQUIDITY_POOL_DEPOSIT_BAD_PRICE:
            case LiquidityPoolDepositResultCode.LiquidityPoolDepositResultCodeEnum.LIQUIDITY_POOL_DEPOSIT_POOL_FULL:
                break;
        }

        return decodedLiquidityPoolDepositResult;
    }
}