// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

namespace StellarDotnetSdk.Xdr;

// === xdr source ============================================================

//  struct ConfigSettingContractLedgerCostV0
//  {
//      // Maximum number of disk entry read operations per ledger
//      uint32 ledgerMaxDiskReadEntries;
//      // Maximum number of bytes of disk reads that can be performed per ledger
//      uint32 ledgerMaxDiskReadBytes;
//      // Maximum number of ledger entry write operations per ledger
//      uint32 ledgerMaxWriteLedgerEntries;
//      // Maximum number of bytes that can be written per ledger
//      uint32 ledgerMaxWriteBytes;
//  
//      // Maximum number of disk entry read operations per transaction
//      uint32 txMaxDiskReadEntries;
//      // Maximum number of bytes of disk reads that can be performed per transaction
//      uint32 txMaxDiskReadBytes;
//      // Maximum number of ledger entry write operations per transaction
//      uint32 txMaxWriteLedgerEntries;
//      // Maximum number of bytes that can be written per transaction
//      uint32 txMaxWriteBytes;
//  
//      int64 feeDiskReadLedgerEntry;  // Fee per disk ledger entry read
//      int64 feeWriteLedgerEntry;     // Fee per ledger entry write
//  
//      int64 feeDiskRead1KB;          // Fee for reading 1KB disk
//  
//      // The following parameters determine the write fee per 1KB.
//      // Rent fee grows linearly until soroban state reaches this size
//      int64 sorobanStateTargetSizeBytes;
//      // Fee per 1KB rent when the soroban state is empty
//      int64 rentFee1KBSorobanStateSizeLow;
//      // Fee per 1KB rent when the soroban state has reached `sorobanStateTargetSizeBytes`
//      int64 rentFee1KBSorobanStateSizeHigh;
//      // Rent fee multiplier for any additional data past the first `sorobanStateTargetSizeBytes`
//      uint32 sorobanStateRentFeeGrowthFactor;
//  };

//  ===========================================================================
public class ConfigSettingContractLedgerCostV0
{
    public Uint32 LedgerMaxDiskReadEntries { get; set; }
    public Uint32 LedgerMaxDiskReadBytes { get; set; }
    public Uint32 LedgerMaxWriteLedgerEntries { get; set; }
    public Uint32 LedgerMaxWriteBytes { get; set; }
    public Uint32 TxMaxDiskReadEntries { get; set; }
    public Uint32 TxMaxDiskReadBytes { get; set; }
    public Uint32 TxMaxWriteLedgerEntries { get; set; }
    public Uint32 TxMaxWriteBytes { get; set; }
    public Int64 FeeDiskReadLedgerEntry { get; set; }
    public Int64 FeeWriteLedgerEntry { get; set; }
    public Int64 FeeDiskRead1KB { get; set; }
    public Int64 SorobanStateTargetSizeBytes { get; set; }
    public Int64 RentFee1KBSorobanStateSizeLow { get; set; }
    public Int64 RentFee1KBSorobanStateSizeHigh { get; set; }
    public Uint32 SorobanStateRentFeeGrowthFactor { get; set; }

    public static void Encode(XdrDataOutputStream stream,
        ConfigSettingContractLedgerCostV0 encodedConfigSettingContractLedgerCostV0)
    {
        Uint32.Encode(stream, encodedConfigSettingContractLedgerCostV0.LedgerMaxDiskReadEntries);
        Uint32.Encode(stream, encodedConfigSettingContractLedgerCostV0.LedgerMaxDiskReadBytes);
        Uint32.Encode(stream, encodedConfigSettingContractLedgerCostV0.LedgerMaxWriteLedgerEntries);
        Uint32.Encode(stream, encodedConfigSettingContractLedgerCostV0.LedgerMaxWriteBytes);
        Uint32.Encode(stream, encodedConfigSettingContractLedgerCostV0.TxMaxDiskReadEntries);
        Uint32.Encode(stream, encodedConfigSettingContractLedgerCostV0.TxMaxDiskReadBytes);
        Uint32.Encode(stream, encodedConfigSettingContractLedgerCostV0.TxMaxWriteLedgerEntries);
        Uint32.Encode(stream, encodedConfigSettingContractLedgerCostV0.TxMaxWriteBytes);
        Int64.Encode(stream, encodedConfigSettingContractLedgerCostV0.FeeDiskReadLedgerEntry);
        Int64.Encode(stream, encodedConfigSettingContractLedgerCostV0.FeeWriteLedgerEntry);
        Int64.Encode(stream, encodedConfigSettingContractLedgerCostV0.FeeDiskRead1KB);
        Int64.Encode(stream, encodedConfigSettingContractLedgerCostV0.SorobanStateTargetSizeBytes);
        Int64.Encode(stream, encodedConfigSettingContractLedgerCostV0.RentFee1KBSorobanStateSizeLow);
        Int64.Encode(stream, encodedConfigSettingContractLedgerCostV0.RentFee1KBSorobanStateSizeHigh);
        Uint32.Encode(stream, encodedConfigSettingContractLedgerCostV0.SorobanStateRentFeeGrowthFactor);
    }

    public static ConfigSettingContractLedgerCostV0 Decode(XdrDataInputStream stream)
    {
        var decodedConfigSettingContractLedgerCostV0 = new ConfigSettingContractLedgerCostV0();
        decodedConfigSettingContractLedgerCostV0.LedgerMaxDiskReadEntries = Uint32.Decode(stream);
        decodedConfigSettingContractLedgerCostV0.LedgerMaxDiskReadBytes = Uint32.Decode(stream);
        decodedConfigSettingContractLedgerCostV0.LedgerMaxWriteLedgerEntries = Uint32.Decode(stream);
        decodedConfigSettingContractLedgerCostV0.LedgerMaxWriteBytes = Uint32.Decode(stream);
        decodedConfigSettingContractLedgerCostV0.TxMaxDiskReadEntries = Uint32.Decode(stream);
        decodedConfigSettingContractLedgerCostV0.TxMaxDiskReadBytes = Uint32.Decode(stream);
        decodedConfigSettingContractLedgerCostV0.TxMaxWriteLedgerEntries = Uint32.Decode(stream);
        decodedConfigSettingContractLedgerCostV0.TxMaxWriteBytes = Uint32.Decode(stream);
        decodedConfigSettingContractLedgerCostV0.FeeDiskReadLedgerEntry = Int64.Decode(stream);
        decodedConfigSettingContractLedgerCostV0.FeeWriteLedgerEntry = Int64.Decode(stream);
        decodedConfigSettingContractLedgerCostV0.FeeDiskRead1KB = Int64.Decode(stream);
        decodedConfigSettingContractLedgerCostV0.SorobanStateTargetSizeBytes = Int64.Decode(stream);
        decodedConfigSettingContractLedgerCostV0.RentFee1KBSorobanStateSizeLow = Int64.Decode(stream);
        decodedConfigSettingContractLedgerCostV0.RentFee1KBSorobanStateSizeHigh = Int64.Decode(stream);
        decodedConfigSettingContractLedgerCostV0.SorobanStateRentFeeGrowthFactor = Uint32.Decode(stream);
        return decodedConfigSettingContractLedgerCostV0;
    }
}