// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

namespace StellarDotnetSdk.Xdr;

// === xdr source ============================================================

//  struct LedgerCloseMetaV2
//  {
//      LedgerCloseMetaExt ext;
//  
//      LedgerHeaderHistoryEntry ledgerHeader;
//  
//      GeneralizedTransactionSet txSet;
//  
//      // NB: transactions are sorted in apply order here
//      // fees for all transactions are processed first
//      // followed by applying transactions
//      TransactionResultMetaV1 txProcessing<>;
//  
//      // upgrades are applied last
//      UpgradeEntryMeta upgradesProcessing<>;
//  
//      // other misc information attached to the ledger close
//      SCPHistoryEntry scpInfo<>;
//  
//      // Size in bytes of live Soroban state, to support downstream
//      // systems calculating storage fees correctly.
//      uint64 totalByteSizeOfLiveSorobanState;
//  
//      // TTL and data/code keys that have been evicted at this ledger.
//      LedgerKey evictedKeys<>;
//  };

//  ===========================================================================
public class LedgerCloseMetaV2
{
    public LedgerCloseMetaExt Ext { get; set; }
    public LedgerHeaderHistoryEntry LedgerHeader { get; set; }
    public GeneralizedTransactionSet TxSet { get; set; }
    public TransactionResultMetaV1[] TxProcessing { get; set; }
    public UpgradeEntryMeta[] UpgradesProcessing { get; set; }
    public SCPHistoryEntry[] ScpInfo { get; set; }
    public Uint64 TotalByteSizeOfLiveSorobanState { get; set; }
    public LedgerKey[] EvictedKeys { get; set; }

    public static void Encode(XdrDataOutputStream stream, LedgerCloseMetaV2 encodedLedgerCloseMetaV2)
    {
        LedgerCloseMetaExt.Encode(stream, encodedLedgerCloseMetaV2.Ext);
        LedgerHeaderHistoryEntry.Encode(stream, encodedLedgerCloseMetaV2.LedgerHeader);
        GeneralizedTransactionSet.Encode(stream, encodedLedgerCloseMetaV2.TxSet);
        var txProcessingsize = encodedLedgerCloseMetaV2.TxProcessing.Length;
        stream.WriteInt(txProcessingsize);
        for (var i = 0; i < txProcessingsize; i++)
        {
            TransactionResultMetaV1.Encode(stream, encodedLedgerCloseMetaV2.TxProcessing[i]);
        }
        var upgradesProcessingsize = encodedLedgerCloseMetaV2.UpgradesProcessing.Length;
        stream.WriteInt(upgradesProcessingsize);
        for (var i = 0; i < upgradesProcessingsize; i++)
        {
            UpgradeEntryMeta.Encode(stream, encodedLedgerCloseMetaV2.UpgradesProcessing[i]);
        }
        var scpInfosize = encodedLedgerCloseMetaV2.ScpInfo.Length;
        stream.WriteInt(scpInfosize);
        for (var i = 0; i < scpInfosize; i++)
        {
            SCPHistoryEntry.Encode(stream, encodedLedgerCloseMetaV2.ScpInfo[i]);
        }
        Uint64.Encode(stream, encodedLedgerCloseMetaV2.TotalByteSizeOfLiveSorobanState);
        var evictedKeyssize = encodedLedgerCloseMetaV2.EvictedKeys.Length;
        stream.WriteInt(evictedKeyssize);
        for (var i = 0; i < evictedKeyssize; i++)
        {
            LedgerKey.Encode(stream, encodedLedgerCloseMetaV2.EvictedKeys[i]);
        }
    }

    public static LedgerCloseMetaV2 Decode(XdrDataInputStream stream)
    {
        var decodedLedgerCloseMetaV2 = new LedgerCloseMetaV2();
        decodedLedgerCloseMetaV2.Ext = LedgerCloseMetaExt.Decode(stream);
        decodedLedgerCloseMetaV2.LedgerHeader = LedgerHeaderHistoryEntry.Decode(stream);
        decodedLedgerCloseMetaV2.TxSet = GeneralizedTransactionSet.Decode(stream);
        var txProcessingsize = stream.ReadInt();
        decodedLedgerCloseMetaV2.TxProcessing = new TransactionResultMetaV1[txProcessingsize];
        for (var i = 0; i < txProcessingsize; i++)
        {
            decodedLedgerCloseMetaV2.TxProcessing[i] = TransactionResultMetaV1.Decode(stream);
        }
        var upgradesProcessingsize = stream.ReadInt();
        decodedLedgerCloseMetaV2.UpgradesProcessing = new UpgradeEntryMeta[upgradesProcessingsize];
        for (var i = 0; i < upgradesProcessingsize; i++)
        {
            decodedLedgerCloseMetaV2.UpgradesProcessing[i] = UpgradeEntryMeta.Decode(stream);
        }
        var scpInfosize = stream.ReadInt();
        decodedLedgerCloseMetaV2.ScpInfo = new SCPHistoryEntry[scpInfosize];
        for (var i = 0; i < scpInfosize; i++)
        {
            decodedLedgerCloseMetaV2.ScpInfo[i] = SCPHistoryEntry.Decode(stream);
        }
        decodedLedgerCloseMetaV2.TotalByteSizeOfLiveSorobanState = Uint64.Decode(stream);
        var evictedKeyssize = stream.ReadInt();
        decodedLedgerCloseMetaV2.EvictedKeys = new LedgerKey[evictedKeyssize];
        for (var i = 0; i < evictedKeyssize; i++)
        {
            decodedLedgerCloseMetaV2.EvictedKeys[i] = LedgerKey.Decode(stream);
        }
        return decodedLedgerCloseMetaV2;
    }
}