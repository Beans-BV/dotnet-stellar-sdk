// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

namespace StellarDotnetSdk.Xdr;

// === xdr source ============================================================

//  union InvokeHostFunctionResult switch (InvokeHostFunctionResultCode code)
//  {
//  case INVOKE_HOST_FUNCTION_SUCCESS:
//      Hash success; // sha256(InvokeHostFunctionSuccessPreImage)
//  case INVOKE_HOST_FUNCTION_MALFORMED:
//  case INVOKE_HOST_FUNCTION_TRAPPED:
//  case INVOKE_HOST_FUNCTION_RESOURCE_LIMIT_EXCEEDED:
//  case INVOKE_HOST_FUNCTION_ENTRY_ARCHIVED:
//  case INVOKE_HOST_FUNCTION_INSUFFICIENT_REFUNDABLE_FEE:
//      void;
//  };

//  ===========================================================================
public class InvokeHostFunctionResult
{
    public InvokeHostFunctionResultCode Discriminant { get; set; } = new();

    public Hash Success { get; set; }

    public static void Encode(XdrDataOutputStream stream, InvokeHostFunctionResult encodedInvokeHostFunctionResult)
    {
        stream.WriteInt((int)encodedInvokeHostFunctionResult.Discriminant.InnerValue);
        switch (encodedInvokeHostFunctionResult.Discriminant.InnerValue)
        {
            case InvokeHostFunctionResultCode.InvokeHostFunctionResultCodeEnum.INVOKE_HOST_FUNCTION_SUCCESS:
                Hash.Encode(stream, encodedInvokeHostFunctionResult.Success);
                break;
            case InvokeHostFunctionResultCode.InvokeHostFunctionResultCodeEnum.INVOKE_HOST_FUNCTION_MALFORMED:
            case InvokeHostFunctionResultCode.InvokeHostFunctionResultCodeEnum.INVOKE_HOST_FUNCTION_TRAPPED:
            case InvokeHostFunctionResultCode.InvokeHostFunctionResultCodeEnum
                .INVOKE_HOST_FUNCTION_RESOURCE_LIMIT_EXCEEDED:
            case InvokeHostFunctionResultCode.InvokeHostFunctionResultCodeEnum.INVOKE_HOST_FUNCTION_ENTRY_ARCHIVED:
            case InvokeHostFunctionResultCode.InvokeHostFunctionResultCodeEnum
                .INVOKE_HOST_FUNCTION_INSUFFICIENT_REFUNDABLE_FEE:
                break;
        }
    }

    public static InvokeHostFunctionResult Decode(XdrDataInputStream stream)
    {
        var decodedInvokeHostFunctionResult = new InvokeHostFunctionResult();
        var discriminant = InvokeHostFunctionResultCode.Decode(stream);
        decodedInvokeHostFunctionResult.Discriminant = discriminant;
        switch (decodedInvokeHostFunctionResult.Discriminant.InnerValue)
        {
            case InvokeHostFunctionResultCode.InvokeHostFunctionResultCodeEnum.INVOKE_HOST_FUNCTION_SUCCESS:
                decodedInvokeHostFunctionResult.Success = Hash.Decode(stream);
                break;
            case InvokeHostFunctionResultCode.InvokeHostFunctionResultCodeEnum.INVOKE_HOST_FUNCTION_MALFORMED:
            case InvokeHostFunctionResultCode.InvokeHostFunctionResultCodeEnum.INVOKE_HOST_FUNCTION_TRAPPED:
            case InvokeHostFunctionResultCode.InvokeHostFunctionResultCodeEnum
                .INVOKE_HOST_FUNCTION_RESOURCE_LIMIT_EXCEEDED:
            case InvokeHostFunctionResultCode.InvokeHostFunctionResultCodeEnum.INVOKE_HOST_FUNCTION_ENTRY_ARCHIVED:
            case InvokeHostFunctionResultCode.InvokeHostFunctionResultCodeEnum
                .INVOKE_HOST_FUNCTION_INSUFFICIENT_REFUNDABLE_FEE:
                break;
        }

        return decodedInvokeHostFunctionResult;
    }
}