// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten
using System;

namespace stellar_dotnetcore_sdk.xdr {

// === xdr source ============================================================

//  struct SetOptionsOp
//  {
//      AccountID* inflationDest; // sets the inflation destination
//  
//      uint32* clearFlags; // which flags to clear
//      uint32* setFlags;   // which flags to set
//  
//      // account threshold manipulation
//      uint32* masterWeight; // weight of the master account
//      uint32* lowThreshold;
//      uint32* medThreshold;
//      uint32* highThreshold;
//  
//      string32* homeDomain; // sets the home domain
//  
//      // Add, update or remove a signer for the account
//      // signer is deleted if the weight is 0
//      Signer* signer;
//  };

//  ===========================================================================
public class SetOptionsOp  {
  public SetOptionsOp () {}
  public AccountID InflationDest {get; set;}
  public Uint32 ClearFlags {get; set;}
  public Uint32 SetFlags {get; set;}
  public Uint32 MasterWeight {get; set;}
  public Uint32 LowThreshold {get; set;}
  public Uint32 MedThreshold {get; set;}
  public Uint32 HighThreshold {get; set;}
  public String32 HomeDomain {get; set;}
  public Signer Signer {get; set;}

  public static void Encode(IByteWriter stream, SetOptionsOp encodedSetOptionsOp) {
    if (encodedSetOptionsOp.InflationDest != null) {
    XdrEncoding.EncodeInt32(1, stream);
    AccountID.Encode(stream, encodedSetOptionsOp.InflationDest);
    } else {
    XdrEncoding.EncodeInt32(0, stream);
    }
    if (encodedSetOptionsOp.ClearFlags != null) {
    XdrEncoding.EncodeInt32(1, stream);
    Uint32.Encode(stream, encodedSetOptionsOp.ClearFlags);
    } else {
    XdrEncoding.EncodeInt32(0, stream);
    }
    if (encodedSetOptionsOp.SetFlags != null) {
    XdrEncoding.EncodeInt32(1, stream);
    Uint32.Encode(stream, encodedSetOptionsOp.SetFlags);
    } else {
    XdrEncoding.EncodeInt32(0, stream);
    }
    if (encodedSetOptionsOp.MasterWeight != null) {
    XdrEncoding.EncodeInt32(1, stream);
    Uint32.Encode(stream, encodedSetOptionsOp.MasterWeight);
    } else {
    XdrEncoding.EncodeInt32(0, stream);
    }
    if (encodedSetOptionsOp.LowThreshold != null) {
    XdrEncoding.EncodeInt32(1, stream);
    Uint32.Encode(stream, encodedSetOptionsOp.LowThreshold);
    } else {
    XdrEncoding.EncodeInt32(0, stream);
    }
    if (encodedSetOptionsOp.MedThreshold != null) {
    XdrEncoding.EncodeInt32(1, stream);
    Uint32.Encode(stream, encodedSetOptionsOp.MedThreshold);
    } else {
    XdrEncoding.EncodeInt32(0, stream);
    }
    if (encodedSetOptionsOp.HighThreshold != null) {
    XdrEncoding.EncodeInt32(1, stream);
    Uint32.Encode(stream, encodedSetOptionsOp.HighThreshold);
    } else {
    XdrEncoding.EncodeInt32(0, stream);
    }
    if (encodedSetOptionsOp.HomeDomain != null) {
    XdrEncoding.EncodeInt32(1, stream);
    String32.Encode(stream, encodedSetOptionsOp.HomeDomain);
    } else {
    XdrEncoding.EncodeInt32(0, stream);
    }
    if (encodedSetOptionsOp.Signer != null) {
    XdrEncoding.EncodeInt32(1, stream);
    Signer.Encode(stream, encodedSetOptionsOp.Signer);
    } else {
    XdrEncoding.EncodeInt32(0, stream);
    }
  }
  public static SetOptionsOp Decode(IByteReader stream) {
    SetOptionsOp decodedSetOptionsOp = new SetOptionsOp();
    int InflationDestPresent = XdrEncoding.DecodeInt32(stream);
    if (InflationDestPresent != 0) {
    decodedSetOptionsOp.InflationDest = AccountID.Decode(stream);
    }
    int ClearFlagsPresent = XdrEncoding.DecodeInt32(stream);
    if (ClearFlagsPresent != 0) {
    decodedSetOptionsOp.ClearFlags = Uint32.Decode(stream);
    }
    int SetFlagsPresent = XdrEncoding.DecodeInt32(stream);
    if (SetFlagsPresent != 0) {
    decodedSetOptionsOp.SetFlags = Uint32.Decode(stream);
    }
    int MasterWeightPresent = XdrEncoding.DecodeInt32(stream);
    if (MasterWeightPresent != 0) {
    decodedSetOptionsOp.MasterWeight = Uint32.Decode(stream);
    }
    int LowThresholdPresent = XdrEncoding.DecodeInt32(stream);
    if (LowThresholdPresent != 0) {
    decodedSetOptionsOp.LowThreshold = Uint32.Decode(stream);
    }
    int MedThresholdPresent = XdrEncoding.DecodeInt32(stream);
    if (MedThresholdPresent != 0) {
    decodedSetOptionsOp.MedThreshold = Uint32.Decode(stream);
    }
    int HighThresholdPresent = XdrEncoding.DecodeInt32(stream);
    if (HighThresholdPresent != 0) {
    decodedSetOptionsOp.HighThreshold = Uint32.Decode(stream);
    }
    int HomeDomainPresent = XdrEncoding.DecodeInt32(stream);
    if (HomeDomainPresent != 0) {
    decodedSetOptionsOp.HomeDomain = String32.Decode(stream);
    }
    int SignerPresent = XdrEncoding.DecodeInt32(stream);
    if (SignerPresent != 0) {
    decodedSetOptionsOp.Signer = Signer.Decode(stream);
    }
    return decodedSetOptionsOp;
  }
}
}
